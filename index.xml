<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title> :)</title>
    <link>https://leewei.co/</link>
    <description>Recent content on  :)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>lee10202013@gmail.com (Lee Wei)</managingEditor>
    <webMaster>lee10202013@gmail.com (Lee Wei)</webMaster>
    <copyright>Â© 2024 Lee Wei</copyright>
    <lastBuildDate>Wed, 10 Sep 2025 21:22:45 -0600</lastBuildDate>
    <atom:link href="https://leewei.co/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fall 2025: CS 6465 Advanced Operating Systems</title>
      <link>https://leewei.co/cs6465/</link>
      <pubDate>Wed, 10 Sep 2025 21:22:45 -0600</pubDate><author>lee10202013@gmail.com (Lee Wei)</author>
      <guid>https://leewei.co/cs6465/</guid>
      <description>Week 1 </description>
      <content:encoded><![CDATA[<h3 id="week-1">Week 1</h3>
]]></content:encoded>
    </item>
    <item>
      <title>Fall 2025: CS 6300 Artificial Intelligence</title>
      <link>https://leewei.co/cs6300/</link>
      <pubDate>Wed, 10 Sep 2025 21:22:31 -0600</pubDate><author>lee10202013@gmail.com (Lee Wei)</author>
      <guid>https://leewei.co/cs6300/</guid>
      <description>Week 1 What is Artificial Intelligence? The science of making machines that act rationally. Rational: An agent acts rationally if it strives to maximally achieve its pre-defined goals. The focus is on the decisions made, not the thought process. Being rational means maximizing your expected utility. Agent is an entity that perceives its environment and acts upon it. Reflex agents: Choose actions based solely on the current percept. Planning agents: Make decisions by considering the future consequences of their actions.</description>
      <content:encoded><![CDATA[<h3 id="week-1">Week 1</h3>
<ul>
<li>What is Artificial Intelligence? The science of making machines that <strong>act rationally</strong>.</li>
<li><strong>Rational</strong>: An agent acts rationally if it strives to maximally achieve its pre-defined goals. The focus is on the decisions made, not the thought process.</li>
<li>Being rational means <strong>maximizing your expected utility.</strong></li>
<li><strong>Agent</strong> is an entity that perceives its environment and acts upon it.
<ul>
<li><strong>Reflex agents</strong>: Choose actions based solely on the current percept.</li>
<li><strong>Planning agents</strong>: Make decisions by considering the future consequences of their actions.</li>
</ul>
</li>
<li>Optimal planning: A search algorithm is optimal if it is guaranteed to find a least-cost solution.</li>
<li>Complete planning: A search algorithm is complete if it is guaranteed to find a solution if one exists.</li>
<li>A <strong>Search Problem</strong> consists of:
<ul>
<li>A state space: The set of all possible states the world can be in.</li>
<li>A successor function (with actions and costs).</li>
<li>A start state and a goal state.</li>
</ul>
</li>
<li>A solution is a sequence of actions which leads from the start state to the goal state.</li>
<li>State Space Graph: A mathematical representation of a search problem where each node is a unique world state.</li>
<li>Search Tree: A tree of plans and their outcomes. A path from the root to a leaf represents a plan.</li>
<li><strong>General Tree search</strong>: An algorithm that expands potential plans and maintains a fringe of partial plans under consideration.
<ul>
<li>Fringe: A data structure to store partial plans.</li>
<li>Expansion: Generating successor nodes from a given node.</li>
<li>Exploration strategy: The order in which nodes are expanded.</li>
</ul>
</li>
<li><strong>Depth-First Search</strong>: A search strategy that expands the deepest node first.
<ul>
<li>Fringe is a LIFO stack.</li>
<li>Time complexity: O(b^m), where &lsquo;b&rsquo; is the branching factor and &rsquo;m&rsquo; is the maximum depth.</li>
<li>Space complexity: O(b*m), as it only needs to store the current path and its siblings.</li>
<li>Completeness: Not complete if the search space is infinite. Can be made complete by setting a depth limit.</li>
<li>Optimality: Not optimal, as it finds the &ldquo;leftmost&rdquo; solution without considering the cost.</li>
</ul>
</li>
</ul>
<h3 id="week-2">Week 2</h3>
<ul>
<li><strong>Breadth-First Search (BFS)</strong>: A search strategy that expands the shallowest unexpanded node first.
<ul>
<li>Fringe is a FIFO queue.</li>
<li>Time complexity: O(b^s), where &lsquo;b&rsquo; is the branching factor and &rsquo;s&rsquo; is the depth of the shallowest solution.</li>
<li>Space complexity: O(b^s).</li>
<li>Completeness: Yes.</li>
<li>Optimality: Yes, but only if all actions have the same cost (e.g., cost = 1).</li>
</ul>
</li>
<li><strong>Iterative Deepening Search (IDS)</strong>: Combines the space advantage of DFS with the optimality of BFS. It performs a series of depth-limited DFS searches, progressively increasing the depth limit.
<ul>
<li>Most of the work is done at the lowest level of the search.</li>
</ul>
</li>
<li><strong>Uniform Cost Search (UCS)</strong>: A search strategy that expands the node with the lowest cumulative cost first.
<ul>
<li>Fringe is a Priority Queue, where the priority is the cumulative cost (g(n)).</li>
<li>Time complexity: O(b^(C*/e)), where C* is the cost of the optimal solution and e is the minimum cost of an action.</li>
<li>Space complexity: O(b^(C*/e)).</li>
<li>Completeness: Yes, if edge costs are positive.</li>
<li>Optimality: Yes.</li>
</ul>
</li>
<li><strong>Drawback of UCS</strong>: It can explore in every direction, which can be inefficient if the search space is large.</li>
<li><strong>Graph Search vs. Tree Search</strong>:
<ul>
<li><strong>Tree Search</strong>: May explore the same state multiple times if it can be reached through different paths.</li>
<li><strong>Graph Search</strong>: Avoids redundant work by keeping track of visited states in a &ldquo;closed set&rdquo;. It only expands nodes that have not been explored before.</li>
</ul>
</li>
<li><strong>Informed Search</strong>: A search strategy that uses problem-specific knowledge in the form of a heuristic function to guide the search.</li>
<li><strong>Heuristic Function (h(n))</strong>: A function that estimates the cost of the cheapest path from a state &rsquo;n&rsquo; to a goal state.</li>
<li><strong>Greedy Best-First Search</strong>: Expands the node that appears to be closest to the goal, based on the heuristic function.
<ul>
<li>It can be misled by inaccurate heuristics and may not find the optimal solution.</li>
</ul>
</li>
<li><em><em>A</em> Search</em>*: A best-first search algorithm that combines the advantages of UCS (backward cost) and Greedy Search (forward cost).
<ul>
<li>Evaluation function: f(n) = g(n) + h(n), where g(n) is the cumulative cost from the start node to &rsquo;n&rsquo;, and h(n) is the estimated cost from &rsquo;n&rsquo; to the goal.</li>
<li>The algorithm terminates when a goal state is dequeued from the fringe.</li>
</ul>
</li>
<li><strong>Admissible Heuristics</strong>: A heuristic &lsquo;h&rsquo; is admissible (or optimistic) if it never overestimates the true cost to the nearest goal. That is, 0 &lt;= h(n) &lt;= h*(n), where h*(n) is the true cost.</li>
<li><strong>Consistent Heuristics</strong>: A heuristic &lsquo;h&rsquo; is consistent if the estimated cost from a node &rsquo;n&rsquo; to the goal is less than or equal to the actual cost of moving to a successor &rsquo;n&rsquo; and then the estimated cost from &rsquo;n&rsquo; to the goal.
<ul>
<li>Consistency implies admissibility.</li>
</ul>
</li>
<li><strong>Optimality of A</strong>*:
<ul>
<li><strong>Tree Search</strong>: A* is optimal if the heuristic is admissible.</li>
<li><strong>Graph Search</strong>: A* is optimal if the heuristic is consistent.</li>
<li>UCS is a special case of A* where h(n) = 0.</li>
</ul>
</li>
</ul>
<h3 id="week-3">Week 3</h3>
<ul>
<li><strong>Adversarial Search</strong>: Used for decision-making in competitive environments where agents have conflicting goals.</li>
<li><strong>Value of a state</strong>: The utility of a state, representing the best possible outcome achievable from that state.</li>
<li><strong>Minimax Algorithm</strong>: For deterministic, zero-sum games (e.g., Tic-Tac-Toe, Chess). One player (MAX) aims to maximize the score, while the other (MIN) aims to minimize it.
<ul>
<li>It&rsquo;s a recursive algorithm that performs a complete depth-first search of the game tree.</li>
<li><strong>Time Complexity</strong>: O(b^m), where &lsquo;b&rsquo; is the branching factor and &rsquo;m&rsquo; is the maximum depth of the tree.</li>
<li><strong>Space Complexity</strong>: O(bm), for a single path in the tree.</li>
</ul>
</li>
</ul>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 1</span><span><span style="color:#6c7086;font-style:italic"># Minimax Implementation</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 2</span><span><span style="color:#cba6f7">def</span> <span style="color:#89b4fa">minimax</span>(state, depth, maximizing_player):
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 3</span><span>    <span style="color:#cba6f7">if</span> depth <span style="color:#89dceb;font-weight:bold">==</span> <span style="color:#fab387">0</span> <span style="color:#89dceb;font-weight:bold">or</span> is_terminal(state):
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 4</span><span>        <span style="color:#cba6f7">return</span> evaluate(state)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 5</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 6</span><span>    <span style="color:#cba6f7">if</span> maximizing_player:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 7</span><span>        max_eval <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#89dceb;font-weight:bold">-</span>infinity
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 8</span><span>        <span style="color:#cba6f7">for</span> child <span style="color:#89dceb;font-weight:bold">in</span> get_children(state):
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 9</span><span>            <span style="color:#89dceb">eval</span> <span style="color:#89dceb;font-weight:bold">=</span> minimax(child, depth <span style="color:#89dceb;font-weight:bold">-</span> <span style="color:#fab387">1</span>, <span style="color:#fab387">False</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">10</span><span>            max_eval <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#89dceb">max</span>(max_eval, <span style="color:#89dceb">eval</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">11</span><span>        <span style="color:#cba6f7">return</span> max_eval
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">12</span><span>    <span style="color:#cba6f7">else</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">13</span><span>        min_eval <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#89dceb;font-weight:bold">+</span>infinity
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">14</span><span>        <span style="color:#cba6f7">for</span> child <span style="color:#89dceb;font-weight:bold">in</span> get_children(state):
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">15</span><span>            <span style="color:#89dceb">eval</span> <span style="color:#89dceb;font-weight:bold">=</span> minimax(child, depth <span style="color:#89dceb;font-weight:bold">-</span> <span style="color:#fab387">1</span>, <span style="color:#fab387">True</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">16</span><span>            min_eval <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#89dceb">min</span>(min_eval, <span style="color:#89dceb">eval</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">17</span><span>        <span style="color:#cba6f7">return</span> min_eval</span></span></code></pre></div>
<ul>
<li><strong>Resource Limits</strong>: In practice, searching the entire game tree is often infeasible due to its size.
<ul>
<li><strong>Solution</strong>: Use a depth-limited search and an evaluation function.</li>
</ul>
</li>
<li><strong>Evaluation Function</strong>: An evaluation function estimates the expected utility of a game state without searching to the end of the game.</li>
<li><strong>Game Tree Pruning</strong>: A technique to reduce the number of nodes evaluated in the search tree.
<ul>
<li><strong>Alpha-Beta Pruning</strong>: An optimization of the Minimax algorithm that prunes away branches of the search tree that cannot influence the final decision.
<ul>
<li><strong>Alpha</strong>: The best value (highest) found so far for the MAX player on the path from the root to the current node.</li>
<li><strong>Beta</strong>: The best value (lowest) found so far for the MIN player on the path from the root to the current node.</li>
<li><strong>Pruning Condition</strong>: Pruning occurs if <code>alpha &gt;= beta</code>.</li>
<li><strong>Time Complexity</strong>: In the best case, with perfect ordering of moves, the time complexity is O(b^(m/2)), effectively doubling the searchable depth. In the worst case, it&rsquo;s the same as Minimax, O(b^m).</li>
</ul>
</li>
</ul>
</li>
</ul>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 1</span><span><span style="color:#6c7086;font-style:italic"># Alpha-Beta Pruning Implementation</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 2</span><span><span style="color:#cba6f7">def</span> <span style="color:#89b4fa">alpha_beta_pruning</span>(state, depth, alpha, beta, maximizing_player):
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 3</span><span>    <span style="color:#cba6f7">if</span> depth <span style="color:#89dceb;font-weight:bold">==</span> <span style="color:#fab387">0</span> <span style="color:#89dceb;font-weight:bold">or</span> is_terminal(state):
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 4</span><span>        <span style="color:#cba6f7">return</span> evaluate(state)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 5</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 6</span><span>    <span style="color:#cba6f7">if</span> maximizing_player:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 7</span><span>        max_eval <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#89dceb;font-weight:bold">-</span>infinity
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 8</span><span>        <span style="color:#cba6f7">for</span> child <span style="color:#89dceb;font-weight:bold">in</span> get_children(state):
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 9</span><span>            <span style="color:#89dceb">eval</span> <span style="color:#89dceb;font-weight:bold">=</span> alpha_beta_pruning(child, depth <span style="color:#89dceb;font-weight:bold">-</span> <span style="color:#fab387">1</span>, alpha, beta, <span style="color:#fab387">False</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">10</span><span>            max_eval <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#89dceb">max</span>(max_eval, <span style="color:#89dceb">eval</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">11</span><span>            alpha <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#89dceb">max</span>(alpha, <span style="color:#89dceb">eval</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">12</span><span>            <span style="color:#cba6f7">if</span> beta <span style="color:#89dceb;font-weight:bold">&lt;=</span> alpha:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">13</span><span>                <span style="color:#cba6f7">break</span>  <span style="color:#6c7086;font-style:italic"># Beta cut-off</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">14</span><span>        <span style="color:#cba6f7">return</span> max_eval
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">15</span><span>    <span style="color:#cba6f7">else</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">16</span><span>        min_eval <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#89dceb;font-weight:bold">+</span>infinity
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">17</span><span>        <span style="color:#cba6f7">for</span> child <span style="color:#89dceb;font-weight:bold">in</span> get_children(state):
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">18</span><span>            <span style="color:#89dceb">eval</span> <span style="color:#89dceb;font-weight:bold">=</span> alpha_beta_pruning(child, depth <span style="color:#89dceb;font-weight:bold">-</span> <span style="color:#fab387">1</span>, alpha, beta, <span style="color:#fab387">True</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">19</span><span>            min_eval <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#89dceb">min</span>(min_eval, <span style="color:#89dceb">eval</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">20</span><span>            beta <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#89dceb">min</span>(beta, <span style="color:#89dceb">eval</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">21</span><span>            <span style="color:#cba6f7">if</span> beta <span style="color:#89dceb;font-weight:bold">&lt;=</span> alpha:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">22</span><span>                <span style="color:#cba6f7">break</span>  <span style="color:#6c7086;font-style:italic"># Alpha cut-off</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">23</span><span>        <span style="color:#cba6f7">return</span> min_eval</span></span></code></pre></div>
<ul>
<li><strong>Expectimax Search</strong>: A variation of Minimax for games with an element of chance (e.g., games with dice rolls).
<ul>
<li>It includes &ldquo;chance nodes&rdquo; in addition to MAX and MIN nodes.</li>
<li>Chance nodes calculate the expected value of the state, which is the average of the values of its children, weighted by their probabilities.</li>
<li>Expectimax Pruning: we cannot prune unless we have bounds on the values of the leaves.</li>
</ul>
</li>
</ul>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 1</span><span><span style="color:#6c7086;font-style:italic"># Expectimax Implementation</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 2</span><span><span style="color:#cba6f7">def</span> <span style="color:#89b4fa">expectimax</span>(state, depth, agent):
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 3</span><span>    <span style="color:#cba6f7">if</span> depth <span style="color:#89dceb;font-weight:bold">==</span> <span style="color:#fab387">0</span> <span style="color:#89dceb;font-weight:bold">or</span> is_terminal(state):
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 4</span><span>        <span style="color:#cba6f7">return</span> evaluate(state)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 5</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 6</span><span>    <span style="color:#cba6f7">if</span> agent <span style="color:#89dceb;font-weight:bold">==</span> MAX:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 7</span><span>        max_eval <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#89dceb;font-weight:bold">-</span>infinity
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 8</span><span>        <span style="color:#cba6f7">for</span> child <span style="color:#89dceb;font-weight:bold">in</span> get_children(state):
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 9</span><span>            <span style="color:#89dceb">eval</span> <span style="color:#89dceb;font-weight:bold">=</span> expectimax(child, depth <span style="color:#89dceb;font-weight:bold">-</span> <span style="color:#fab387">1</span>, MIN)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">10</span><span>            max_eval <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#89dceb">max</span>(max_eval, <span style="color:#89dceb">eval</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">11</span><span>        <span style="color:#cba6f7">return</span> max_eval
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">12</span><span>    <span style="color:#cba6f7">elif</span> agent <span style="color:#89dceb;font-weight:bold">==</span> MIN:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">13</span><span>        min_eval <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#89dceb;font-weight:bold">+</span>infinity
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">14</span><span>        <span style="color:#cba6f7">for</span> child <span style="color:#89dceb;font-weight:bold">in</span> get_children(state):
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">15</span><span>            <span style="color:#89dceb">eval</span> <span style="color:#89dceb;font-weight:bold">=</span> expectimax(child, depth <span style="color:#89dceb;font-weight:bold">-</span> <span style="color:#fab387">1</span>, CHANCE)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">16</span><span>            min_eval <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#89dceb">min</span>(min_eval, <span style="color:#89dceb">eval</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">17</span><span>        <span style="color:#cba6f7">return</span> min_eval
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">18</span><span>    <span style="color:#cba6f7">else</span>: <span style="color:#6c7086;font-style:italic"># CHANCE node</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">19</span><span>        expected_value <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">20</span><span>        children <span style="color:#89dceb;font-weight:bold">=</span> get_children(state)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">21</span><span>        num_children <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#89dceb">len</span>(children)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">22</span><span>        <span style="color:#cba6f7">for</span> child <span style="color:#89dceb;font-weight:bold">in</span> children:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">23</span><span>            <span style="color:#6c7086;font-style:italic"># Assuming equal probability for each outcome</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">24</span><span>            prob <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#fab387">1.0</span> <span style="color:#89dceb;font-weight:bold">/</span> num_children
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">25</span><span>            expected_value <span style="color:#89dceb;font-weight:bold">+=</span> prob <span style="color:#89dceb;font-weight:bold">*</span> expectimax(child, depth <span style="color:#89dceb;font-weight:bold">-</span> <span style="color:#fab387">1</span>, MAX)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">26</span><span>        <span style="color:#cba6f7">return</span> expected_value</span></span></code></pre></div>
<h4 id="probability">Probability</h4>
<ul>
<li><strong>Random Variables</strong>: A random variable represents an event whose outcome is unknown. It can take on a range of values, each with an associated probability.</li>
<li><strong>Probability Distribution</strong>: A function that describes the likelihood of all possible outcomes for a random variable. The sum of all probabilities in a distribution must equal 1.</li>
<li><strong>Joint Distributions</strong>: A joint probability distribution shows the probability of two or more random variables all happening at the same time.
<ul>
<li>For &rsquo;n&rsquo; variables, each with a domain size of &rsquo;d&rsquo;, the size of the joint distribution is d^n.</li>
</ul>
</li>
<li><strong>Probabilistic Model</strong>: A probabilistic model is a joint distribution over a set of random variables, which provides a complete description of the domain.</li>
<li><strong>Events</strong>: An event is a set of outcomes. In probability, we often care about partial assignments of variables.</li>
<li><strong>Marginal Distributions</strong>: A marginal distribution is a sub-table of a joint distribution where some variables have been eliminated.
<ul>
<li><strong>Marginalization</strong>: The process of calculating a marginal distribution by summing over the probabilities of the eliminated variables.</li>
</ul>
</li>
<li><strong>Conditional Probabilities</strong>: The probability of an event &lsquo;a&rsquo; occurring, given that another event &lsquo;b&rsquo; has already occurred. It is defined by the formula: <code>P(a|b) = P(a, b) / P(b)</code>.</li>
<li><strong>Probabilistic Inference</strong>: The process of computing a desired probability from a set of known probabilities.
<ul>
<li><strong>The Product Rule</strong>: A fundamental rule relating joint and conditional probabilities: <code>P(x, y) = P(x|y) * P(y)</code>.</li>
<li><strong>The Chain Rule</strong>: A generalization of the product rule that allows for the calculation of the joint probability of any number of random variables: <code>P(x1, x2, ..., xn) = P(x1) * P(x2|x1) * ... * P(xn|x1, ..., xn-1)</code>.</li>
<li><strong>Bayes&rsquo; Rule</strong>: A rule that describes the probability of an event, based on prior knowledge of conditions that might be related to the event: <code>P(x|y) = (P(y|x) * P(x)) / P(y)</code>.</li>
</ul>
</li>
<li><strong>Independence</strong>: Two random variables, X and Y, are independent if the occurrence of one does not affect the probability of the other. This is expressed as: <code>P(X, Y) = P(X) * P(Y)</code>.
<ul>
<li><strong>Conditional Independence</strong>: Two variables, X and Y, are conditionally independent given a third variable, Z, if <code>P(X, Y | Z) = P(X | Z) * P(Y | Z)</code> for all values of x, y, and z.</li>
</ul>
</li>
<li><strong>Normalization</strong>: The process of ensuring that a probability distribution sums to 1. This is often done by dividing each value by the sum of all values.</li>
<li><strong>Multi-Agent Utilities</strong>: In multi-agent systems, each agent has its own utility function that it aims to maximize. The overall utility of a state is a combination of the utilities of all agents.</li>
<li><strong>Maximum Expected Utility (MEU)</strong>: The principle of choosing an action that maximizes an agent&rsquo;s expected utility. The expected utility of an action is the sum of the utilities of all possible outcomes, weighted by their probabilities.</li>
</ul>
<h3 id="week-4">Week 4</h3>
<ul>
<li><strong>Markov Decision Processes (MDPs)</strong>: A framework for modeling decision-making in stochastic (non-deterministic) environments. MDPs are useful for problems where the outcomes of actions are uncertain. One way to solve MDPs is through a variation of expectimax search.
<ul>
<li><strong>Components of an MDP</strong>:
<ul>
<li>A set of states (S).</li>
<li>A set of actions (A).</li>
<li>A <strong>transition function</strong>, T(s, a, s&rsquo;), which gives the probability of reaching state s&rsquo; from state s after taking action a.</li>
<li>A <strong>reward function</strong>, R(s, a, s&rsquo;), which gives the reward received after transitioning from state s to s&rsquo; by taking action a.</li>
<li>A start state.</li>
<li>An optional terminal state.</li>
</ul>
</li>
</ul>
</li>
<li><strong>The Markov Property</strong>: The core assumption in an MDP is that the future is independent of the past, given the present. This means that the transition to the next state depends only on the current state and the chosen action, not on the sequence of states that led to the current state.</li>
<li><strong>Policies</strong>: In an MDP, the goal is to find an optimal <strong>policy</strong>, denoted as Ï*(s). A policy is a mapping from states to actions, which tells the agent what action to take in each state to maximize its expected utility.</li>
<li><strong>Discounting</strong>: A technique used to value immediate rewards more highly than future rewards. A discount factor, Î³ (gamma), between 0 and 1, is used to decay the value of future rewards exponentially.
<ul>
<li>Discounting also helps to ensure that the algorithms for solving MDPs converge, especially in infinite-horizon problems.</li>
</ul>
</li>
<li><strong>Dealing with Infinite Horizons</strong>: What if the game or process can last forever?
<ul>
<li><strong>Solution 1: Finite Horizon</strong>: Assume the process ends after a fixed number of steps.</li>
<li><strong>Solution 2: Discounting</strong>: Use a discount factor (0 &lt; Î³ &lt; 1) to make distant rewards less valuable.</li>
<li><strong>Solution 3: Absorbing States</strong>: Guarantee that a terminal state will eventually be reached, which ends the process.</li>
</ul>
</li>
<li><strong>Bellman Equations</strong>: A set of equations that describe the relationship between the value of a state and the values of its successor states. The Bellman equation for the optimal value function, V*(s), is:
<ul>
<li><code>V*(s) = max_a Î£_{s'} T(s, a, s') [R(s, a, s') + Î³V*(s')]</code></li>
<li>This equation states that the optimal value of a state is the maximum expected reward achievable from that state, which is calculated by considering all possible actions and their outcomes.</li>
</ul>
</li>
<li><strong>Value Iteration</strong>: A dynamic programming algorithm for finding the optimal value function, V*(s), for an MDP. It starts with an arbitrary value function, V0(s) = 0 for all states, and iteratively updates the values using the Bellman equation until they converge.
<ul>
<li><strong>Algorithm</strong>:
<ol>
<li>Initialize V0(s) = 0 for all s.</li>
<li>For k = 1, 2, &hellip; until convergence:
<ul>
<li>For each state s:
<ul>
<li><code>Vk(s) = max_a Î£_{s'} T(s, a, s') [R(s, a, s') + Î³V_{k-1}(s')]</code></li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li><strong>Time Complexity</strong>: O(|S|^2 * |A|) per iteration, where |S| is the number of states and |A| is the number of actions.</li>
<li><strong>Convergence</strong>: The value iteration algorithm is guaranteed to converge to the optimal value function because the Bellman operator is a contraction mapping. With each iteration, the error between the current value function and the optimal one is reduced by a factor of Î³.</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Fall 2025: CS 6150 Graduate Algorithm</title>
      <link>https://leewei.co/cs6150/</link>
      <pubDate>Wed, 10 Sep 2025 21:22:23 -0600</pubDate><author>lee10202013@gmail.com (Lee Wei)</author>
      <guid>https://leewei.co/cs6150/</guid>
      <description>Week 1 </description>
      <content:encoded><![CDATA[<h3 id="week-1">Week 1</h3>
]]></content:encoded>
    </item>
    <item>
      <title>LLVM: Constraint Elimination Pass</title>
      <link>https://leewei.co/llvm-constraint/</link>
      <pubDate>Mon, 14 Apr 2025 13:21:15 -0700</pubDate><author>lee10202013@gmail.com (Lee Wei)</author>
      <guid>https://leewei.co/llvm-constraint/</guid>
      <description>Introduction Constraint Elimination is a transformation pass that extracts facts from LLVM IR and tries to replace certain uses with known facts. One common replacement is to replace conditional comparisons with constants (true or false) when known. The following is a simple example of how Constraint Elimination works.
1int foo(int x, int y) { 2 if (x &amp;gt; y) { // x &amp;gt; y is a known fact in this block 3 if (x &amp;lt;= y) { // replace x &amp;lt;= y with false 4 return 2; 5 } 6 return 1; 7 } 8 9 return 0; 10} 11 12// after constraint elimination 13int foo(int x, int y) { 14 if (x &amp;gt; y) { 15 if (false) { // block can be removed 16 return 2; 17 } 18 return 1; 19 } 20 21 return 0; 22} The logic behind Constraint Elimination relies on an analysis pass called the Constraint System.</description>
      <content:encoded><![CDATA[<h3 id="introduction">Introduction</h3>
<p>Constraint Elimination is a transformation pass that extracts facts from LLVM IR and tries to replace certain uses with known facts. One common replacement is to replace conditional comparisons with constants (true or false) when known. The following is a simple example of how Constraint Elimination works.</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 1</span><span><span style="color:#f38ba8">int</span> <span style="color:#89b4fa">foo</span>(<span style="color:#f38ba8">int</span> x, <span style="color:#f38ba8">int</span> y) {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 2</span><span>  <span style="color:#cba6f7">if</span> (x <span style="color:#89dceb;font-weight:bold">&gt;</span> y) {    <span style="color:#6c7086;font-style:italic">// x &gt; y is a known fact in this block
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 3</span><span><span style="color:#6c7086;font-style:italic"></span>    <span style="color:#cba6f7">if</span> (x <span style="color:#89dceb;font-weight:bold">&lt;=</span> y) { <span style="color:#6c7086;font-style:italic">// replace x &lt;= y with false
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 4</span><span><span style="color:#6c7086;font-style:italic"></span>      <span style="color:#cba6f7">return</span> <span style="color:#fab387">2</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 5</span><span>    } 
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 6</span><span>    <span style="color:#cba6f7">return</span> <span style="color:#fab387">1</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 7</span><span>  } 
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 8</span><span>  
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 9</span><span>  <span style="color:#cba6f7">return</span> <span style="color:#fab387">0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">10</span><span>}
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">11</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">12</span><span><span style="color:#6c7086;font-style:italic">// after constraint elimination
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">13</span><span><span style="color:#6c7086;font-style:italic"></span><span style="color:#f38ba8">int</span> <span style="color:#89b4fa">foo</span>(<span style="color:#f38ba8">int</span> x, <span style="color:#f38ba8">int</span> y) {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">14</span><span>  <span style="color:#cba6f7">if</span> (x <span style="color:#89dceb;font-weight:bold">&gt;</span> y) {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">15</span><span>    <span style="color:#cba6f7">if</span> (<span style="color:#89dceb">false</span>) { <span style="color:#6c7086;font-style:italic">// block can be removed
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">16</span><span><span style="color:#6c7086;font-style:italic"></span>      <span style="color:#cba6f7">return</span> <span style="color:#fab387">2</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">17</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">18</span><span>    <span style="color:#cba6f7">return</span> <span style="color:#fab387">1</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">19</span><span>  } 
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">20</span><span>  
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">21</span><span>  <span style="color:#cba6f7">return</span> <span style="color:#fab387">0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">22</span><span>}</span></span></code></pre></div>
<p>The logic behind Constraint Elimination relies on an analysis pass called the Constraint System. Constraint Elimination stores known facts inside two constraint systems (signed and unsigned) and asks the constraint system if it&rsquo;s okay to replace uses.</p>
<h3 id="constraint-system">Constraint System</h3>
<p>The Constraint System stores known facts in the following form (c0 is constant, c1 to cn are coefficients, v1 to vn are variables):</p>
<p><code>c0 &lt;= c1 * v1 + c2 * v2 â¦ + cn * vn</code></p>
<p>For instance, constraint <code>x &gt;= 0</code> will be decomposed into <code>0 &lt;= 1 * x</code> and constraint <code>y &gt;= 0</code> will be decomposed into <code>0 &lt;= 0 * x + 1 * y</code>. These two constraints are <code>true</code> in the constraint system, which implies a <strong>logical AND</strong> between them, resulting in <code>x &gt;= 0 &amp;&amp; y &gt;= 0</code>.</p>
<p>Constraint Elimination will ask the constraint system whether a constraint (<code>A</code>) is implied by adding a negation of the constraint (<code>!A</code>) into the system. Since constraints are combined with logical AND, the system becomes <code>C1 &amp;&amp; C2 &amp;&amp; ... &amp;&amp; Cn &amp;&amp; !A</code>. If this is satisfiable (sat), thereâs a solution where <code>A</code> is false, so <code>A</code> isnât implied by the existing constraints. If unsatisfiable (unsat), no solution exists where <code>A</code> is false, meaning <code>A</code> must be true whenever the existing constraints hold. For example, with constraints <code>A &amp;&amp; B</code>, checking <code>A</code> by adding <code>!A</code> gives <code>A &amp;&amp; B &amp;&amp; !A</code>, which is unsat (a contradiction). Thus, <code>A</code> is implied and can be safely replaced with <code>true</code> in the ConstraintElimination pass.</p>
<p>Now that we understand how constraints are handled, letâs dive into the core of the Constraint Elimination pass.</p>
<h3 id="constraint-elimination">Constraint Elimination</h3>
<p>The Constraint Elimination pass works roughly as follows:</p>
<ol>
<li>Perform a Depth-First search the dominator tree and add entries to a worklist for every basic block. An entry can be a Fact to be added or a Check that needs to check if it can be replaced.</li>
<li>Sort the worklist by dominance information from the dominator tree.</li>
<li>Process sorted worklist and replace implied conditions.</li>
<li>Remove instructions with no uses inside the function.</li>
</ol>
<p>Constraint Elimination begins by traversing the <code>entry</code> block and iterates over every instruction. If there&rsquo;s a comparison instruction <code>icmp</code>, it adds an entry <code>UseCheck</code> into the worklist to check if it can be replaced later. If the terminator is a conditional branch, it adds corresponding facts to the successor blocks.</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">1</span><span>define i1 <span style="color:#f38ba8">@</span>src(i4 <span style="color:#89dceb;font-weight:bold">%</span>x, i4 <span style="color:#89dceb;font-weight:bold">%</span>y) {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">2</span><span><span style="color:#89dceb">entry</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">3</span><span>  <span style="color:#89dceb;font-weight:bold">%</span>c<span style="color:#fab387">.1</span> <span style="color:#89dceb;font-weight:bold">=</span> icmp slt i4 <span style="color:#89dceb;font-weight:bold">%</span>x, <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">4</span><span>  br i1 <span style="color:#89dceb;font-weight:bold">%</span>c<span style="color:#fab387">.1</span>, label <span style="color:#89dceb;font-weight:bold">%</span>t, label <span style="color:#89dceb;font-weight:bold">%</span>f
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">5</span><span><span style="color:#89dceb">t</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">6</span><span>  ...x <span style="color:#89dceb;font-weight:bold">&lt;</span> <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">7</span><span><span style="color:#89dceb">f</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">8</span><span>  ...x <span style="color:#89dceb;font-weight:bold">&gt;=</span> <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">9</span><span>}</span></span></code></pre></div>
<p>Branching to block <code>t</code> means that <code>%c.1</code> is true, where it can safely add <code>x &lt; 0</code> constraint to block <code>t</code>. On the other hand, it will invert the predicate to <code>x &gt;= 0</code> and add this constraint to block <code>f</code>. It will traverse to the next basic block and do the same until it traverses every basic block in the dominator tree.</p>
<p>Consider another example: block <code>t</code> is reached if <code>x &lt; 0 || y &lt; 0</code>. However, as mentioned earlier that the current constraint system has an implicit logical AND for every fact, constraint elimination cannot add this fact <code>x &lt; 0 || y &lt; 0</code> into the constraint system. As for block <code>f</code>, it can add the inverse of predicate <code>x &gt;= 0 &amp;&amp; y &gt;= 0</code> into the constraint system.</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 1</span><span>define i1 <span style="color:#f38ba8">@</span>src(i4 <span style="color:#89dceb;font-weight:bold">%</span>x, i4 <span style="color:#89dceb;font-weight:bold">%</span>y) {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 2</span><span><span style="color:#89dceb">entry</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 3</span><span>  <span style="color:#89dceb;font-weight:bold">%</span>c<span style="color:#fab387">.1</span> <span style="color:#89dceb;font-weight:bold">=</span> icmp slt i4 <span style="color:#89dceb;font-weight:bold">%</span>x, <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 4</span><span>  <span style="color:#89dceb;font-weight:bold">%</span>c<span style="color:#fab387">.2</span> <span style="color:#89dceb;font-weight:bold">=</span> icmp slt i4 <span style="color:#89dceb;font-weight:bold">%</span>y, <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 5</span><span>  <span style="color:#89dceb;font-weight:bold">%</span>or <span style="color:#89dceb;font-weight:bold">=</span> or i1 <span style="color:#89dceb;font-weight:bold">%</span>c<span style="color:#fab387">.1</span>, <span style="color:#89dceb;font-weight:bold">%</span>c<span style="color:#fab387">.2</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 6</span><span>  br i1 <span style="color:#89dceb;font-weight:bold">%</span>or, label <span style="color:#89dceb;font-weight:bold">%</span>t, label <span style="color:#89dceb;font-weight:bold">%</span>f
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 7</span><span><span style="color:#89dceb">t</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 8</span><span>  ret i1 <span style="color:#89dceb">false</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 9</span><span><span style="color:#89dceb">f</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">10</span><span>  <span style="color:#89dceb;font-weight:bold">%</span>cmp <span style="color:#89dceb;font-weight:bold">=</span> icmp sge i4 <span style="color:#89dceb;font-weight:bold">%</span>x, <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">11</span><span>  ret i1 <span style="color:#89dceb;font-weight:bold">%</span>cmp
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">12</span><span>}</span></span></code></pre></div>
<p>Below is the worklist after traversing all blocks in the function and sorting the worklist. <code>NumIn</code> and <code>NumOut</code> represent the sequence for the Depth-first search. The sorted entries follow these rules <code>NumIn &lt; ConditionFact &lt; Check &lt; InstrBefore</code>, where blocks with lower NumIn values dominate those with higher ones. In the same basic block, condition facts are processed before <code>UseCheck</code>.</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">1</span><span><span style="color:#6c7086;font-style:italic">// entry NumIn=0, NumOut=5
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">2</span><span><span style="color:#6c7086;font-style:italic">// t     NumIn=1, Numout=2
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">3</span><span><span style="color:#6c7086;font-style:italic">// f     NumIn=3, Numout=4
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">4</span><span><span style="color:#6c7086;font-style:italic"></span>UseCheck(<span style="color:#89dceb;font-weight:bold">%</span>c<span style="color:#fab387">.1</span>, ICMP_SLT, <span style="color:#89dceb;font-weight:bold">%</span>x, <span style="color:#fab387">0</span>, NumIn<span style="color:#89dceb;font-weight:bold">=</span><span style="color:#fab387">0</span>, NumOut<span style="color:#89dceb;font-weight:bold">=</span><span style="color:#fab387">5</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">5</span><span>UseCheck(<span style="color:#89dceb;font-weight:bold">%</span>c<span style="color:#fab387">.2</span>, ICMP_SLT, <span style="color:#89dceb;font-weight:bold">%</span>y, <span style="color:#fab387">0</span>, NumIn<span style="color:#89dceb;font-weight:bold">=</span><span style="color:#fab387">0</span>, NumOut<span style="color:#89dceb;font-weight:bold">=</span><span style="color:#fab387">5</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">6</span><span>ConditionFact(DT.getNode(f), ICMP_SGE, <span style="color:#89dceb;font-weight:bold">%</span>x, <span style="color:#fab387">0</span>, NumIn<span style="color:#89dceb;font-weight:bold">=</span><span style="color:#fab387">3</span>, NumOut<span style="color:#89dceb;font-weight:bold">=</span><span style="color:#fab387">4</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">7</span><span>ConditionFact(DT.getNode(f), ICMP_SGE, <span style="color:#89dceb;font-weight:bold">%</span>y, <span style="color:#fab387">0</span>, NumIn<span style="color:#89dceb;font-weight:bold">=</span><span style="color:#fab387">3</span>, NumOut<span style="color:#89dceb;font-weight:bold">=</span><span style="color:#fab387">4</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">8</span><span>UseCheck(<span style="color:#89dceb;font-weight:bold">%</span>cmp, ICMP_SGE, <span style="color:#89dceb;font-weight:bold">%</span>x, <span style="color:#fab387">0</span>, NumIn<span style="color:#89dceb;font-weight:bold">=</span><span style="color:#fab387">3</span>, NumOut<span style="color:#89dceb;font-weight:bold">=</span><span style="color:#fab387">4</span>)</span></span></code></pre></div>
<p>By processing the above worklist, constraint elimination learns that it can replace <code>%cmp</code> with <code>true</code> in block <code>f</code> (see <a href="https://alive2.llvm.org/ce/z/MvjjwH">Alive2 proof</a> â a tool to verify LLVM IR optimizations), and safely remove <code>%cmp = icmp sge i4 %x, 0</code> instruction.</p>
<h3 id="missing-cases">Missing Cases</h3>
<p>As of writing, I have submitted a <a href="https://github.com/llvm/llvm-project/pull/132124">PR</a> to add optimization opportunities for Constraint Elimination. The pass adds additional facts if the condition being analyzed matches one of the following four patterns.</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">1</span><span><span style="color:#6c7086;font-style:italic"># bitwise OR</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">2</span><span><span style="color:#89dceb;font-weight:bold">(</span>LHS | RHS &gt;<span style="color:#89dceb;font-weight:bold">=</span> 0<span style="color:#89dceb;font-weight:bold">)</span> <span style="color:#89dceb;font-weight:bold">=</span>&gt; LHS &gt;<span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#fab387">0</span> <span style="color:#89dceb;font-weight:bold">&amp;&amp;</span> RHS &gt;<span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">3</span><span><span style="color:#89dceb;font-weight:bold">(</span>LHS | RHS &gt; -1<span style="color:#89dceb;font-weight:bold">)</span> <span style="color:#89dceb;font-weight:bold">=</span>&gt; LHS &gt;<span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#fab387">0</span> <span style="color:#89dceb;font-weight:bold">&amp;&amp;</span> RHS &gt;<span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">4</span><span><span style="color:#6c7086;font-style:italic"># bitwise AND</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">5</span><span><span style="color:#89dceb;font-weight:bold">(</span>LHS &amp; RHS &lt; 0<span style="color:#89dceb;font-weight:bold">)</span>   <span style="color:#89dceb;font-weight:bold">=</span>&gt;  LHS &lt; <span style="color:#fab387">0</span> <span style="color:#89dceb;font-weight:bold">&amp;&amp;</span> RHS &lt; <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">6</span><span><span style="color:#89dceb;font-weight:bold">(</span>LHS &amp; RHS &lt;<span style="color:#89dceb;font-weight:bold">=</span> -1<span style="color:#89dceb;font-weight:bold">)</span> <span style="color:#89dceb;font-weight:bold">=</span>&gt;  LHS &lt; <span style="color:#fab387">0</span> <span style="color:#89dceb;font-weight:bold">&amp;&amp;</span> RHS &lt; <span style="color:#fab387">0</span></span></span></code></pre></div>
<p>This example demonstrates how my PR works. Before my PR, constraint elimination would only add one fact <code>%and.1 &lt; 0</code> to block <code>then</code>. With the added facts <code>x &lt; 0 &amp;&amp; y &lt; 0</code> in the <code>then</code> block, the pass can replace <code>%t.1</code> and <code>%t.2</code> with <code>true</code>.</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 1</span><span><span style="color:#6c7086;font-style:italic">// before
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 2</span><span><span style="color:#6c7086;font-style:italic"></span>define <span style="color:#f38ba8">void</span> <span style="color:#f38ba8">@</span>src(i4 <span style="color:#89dceb;font-weight:bold">%</span>x, i4 <span style="color:#89dceb;font-weight:bold">%</span>y) {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 3</span><span><span style="color:#89dceb">entry</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 4</span><span>  <span style="color:#89dceb;font-weight:bold">%</span>and<span style="color:#fab387">.1</span> <span style="color:#89dceb;font-weight:bold">=</span> and i4 <span style="color:#89dceb;font-weight:bold">%</span>y, <span style="color:#89dceb;font-weight:bold">%</span>x
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 5</span><span>  <span style="color:#89dceb;font-weight:bold">%</span>c<span style="color:#fab387">.1</span><span style="color:#89dceb;font-weight:bold">=</span> icmp slt i4 <span style="color:#89dceb;font-weight:bold">%</span>and<span style="color:#fab387">.1</span>, <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 6</span><span>  br i1 <span style="color:#89dceb;font-weight:bold">%</span>c<span style="color:#fab387">.1</span>, label <span style="color:#89dceb;font-weight:bold">%</span>then, label <span style="color:#89dceb;font-weight:bold">%</span>end
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 8</span><span><span style="color:#89dceb">then</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 9</span><span>  ; <span style="color:#89dceb">fact</span>: <span style="color:#89dceb;font-weight:bold">%</span>and<span style="color:#fab387">.1</span> <span style="color:#89dceb;font-weight:bold">&lt;</span> <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">10</span><span>  <span style="color:#89dceb;font-weight:bold">%</span>t<span style="color:#fab387">.1</span> <span style="color:#89dceb;font-weight:bold">=</span> icmp slt i4 <span style="color:#89dceb;font-weight:bold">%</span>x, <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">11</span><span>  <span style="color:#89dceb;font-weight:bold">%</span>t<span style="color:#fab387">.2</span> <span style="color:#89dceb;font-weight:bold">=</span> icmp slt i4 <span style="color:#89dceb;font-weight:bold">%</span>y, <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">12</span><span>  call <span style="color:#f38ba8">void</span> <span style="color:#f38ba8">@</span>use(i1 <span style="color:#89dceb;font-weight:bold">%</span>t<span style="color:#fab387">.1</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">13</span><span>  call <span style="color:#f38ba8">void</span> <span style="color:#f38ba8">@</span>use(i1 <span style="color:#89dceb;font-weight:bold">%</span>t<span style="color:#fab387">.2</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">14</span><span>  ret <span style="color:#f38ba8">void</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">15</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">16</span><span><span style="color:#89dceb">end</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">17</span><span>  ret <span style="color:#f38ba8">void</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">18</span><span>}
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">19</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">20</span><span><span style="color:#6c7086;font-style:italic">// after
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">21</span><span><span style="color:#6c7086;font-style:italic"></span>define <span style="color:#f38ba8">void</span> <span style="color:#f38ba8">@</span>tgt(i4 <span style="color:#89dceb;font-weight:bold">%</span>x, i4 <span style="color:#89dceb;font-weight:bold">%</span>y) {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">22</span><span><span style="color:#89dceb">entry</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">23</span><span>  <span style="color:#89dceb;font-weight:bold">%</span>and<span style="color:#fab387">.1</span> <span style="color:#89dceb;font-weight:bold">=</span> and i4 <span style="color:#89dceb;font-weight:bold">%</span>y, <span style="color:#89dceb;font-weight:bold">%</span>x
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">24</span><span>  <span style="color:#89dceb;font-weight:bold">%</span>c<span style="color:#fab387">.1</span><span style="color:#89dceb;font-weight:bold">=</span> icmp slt i4 <span style="color:#89dceb;font-weight:bold">%</span>and<span style="color:#fab387">.1</span>, <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">25</span><span>  br i1 <span style="color:#89dceb;font-weight:bold">%</span>c<span style="color:#fab387">.1</span>, label <span style="color:#89dceb;font-weight:bold">%</span>then, label <span style="color:#89dceb;font-weight:bold">%</span>end
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">26</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">27</span><span><span style="color:#89dceb">then</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">28</span><span>  call <span style="color:#f38ba8">void</span> <span style="color:#f38ba8">@</span>use(i1 <span style="color:#89dceb">true</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">29</span><span>  call <span style="color:#f38ba8">void</span> <span style="color:#f38ba8">@</span>use(i1 <span style="color:#89dceb">true</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">30</span><span>  ret <span style="color:#f38ba8">void</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">31</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">32</span><span><span style="color:#89dceb">end</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">33</span><span>  ret <span style="color:#f38ba8">void</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">34</span><span>}</span></span></code></pre></div>
<h3 id="measure-replacement-counts">Measure Replacement Counts</h3>
<p>To evaluate the impact of my patch, I measured the number of replacements triggered by the Constraint Elimination pass. My approach is to print log whenever additional facts are added and replacement uses are triggered. This experiment was conducted on two projects, LLVM and Rust.</p>
<h4 id="building-llvm-with-ubsan-enabled">Building LLVM with UBSan enabled</h4>
<p>With UBSan enabled, building LLVM will go through a series of bound checks, firing more Constraint Elimination. The first build has my constraint elimination patch, and I commented out my patch in the second build.</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 1</span><span><span style="color:#6c7086;font-style:italic"># $CC_HOME points to my locally built LLVM</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 2</span><span>cmake -GNinja -DCMAKE_CXX_COMPILER<span style="color:#89dceb;font-weight:bold">=</span><span style="color:#f5e0dc">$CC_HOME</span>/bin/clang++ <span style="color:#89b4fa">\
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 3</span><span><span style="color:#89b4fa"></span>  -DCMAKE_C_COMPILER<span style="color:#89dceb;font-weight:bold">=</span><span style="color:#f5e0dc">$CC_HOME</span>/bin/clang <span style="color:#89b4fa">\
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 4</span><span><span style="color:#89b4fa"></span>  -DCMAKE_BUILD_TYPE<span style="color:#89dceb;font-weight:bold">=</span>Release <span style="color:#89b4fa">\
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 5</span><span><span style="color:#89b4fa"></span>  -DLLVM_ENABLE_PROJECTS<span style="color:#89dceb;font-weight:bold">=</span><span style="color:#a6e3a1">&#34;llvm;clang&#34;</span> <span style="color:#89b4fa">\
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 6</span><span><span style="color:#89b4fa"></span>  -DLLVM_CCACHE_BUILD<span style="color:#89dceb;font-weight:bold">=</span>OFF -DLLVM_BUILD_EXAMPLES<span style="color:#89dceb;font-weight:bold">=</span>ON <span style="color:#89b4fa">\
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 7</span><span><span style="color:#89b4fa"></span>  ../llvm -DLLVM_TARGETS_TO_BUILD<span style="color:#89dceb;font-weight:bold">=</span>X86 <span style="color:#89b4fa">\
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 8</span><span><span style="color:#89b4fa"></span>  -DLLVM_USE_SANITIZER<span style="color:#89dceb;font-weight:bold">=</span>Undefined
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 9</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">10</span><span><span style="color:#6c7086;font-style:italic"># without my patch</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">11</span><span>ninja -j <span style="color:#fab387">12</span> &gt; without.txt 2&gt;&amp;<span style="color:#fab387">1</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">12</span><span><span style="color:#6c7086;font-style:italic"># with my constraint elimination patch</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">13</span><span>ninja -j <span style="color:#fab387">12</span> &gt; with.txt 2&gt;&amp;<span style="color:#fab387">1</span></span></span></code></pre></div>
<p>We observed that Constraint Elimination added several new facts while building LLVM.</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">1</span><span><span style="color:#6c7086;font-style:italic"># without my patch</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">2</span><span>$ cat ce2/without.txt | grep <span style="color:#a6e3a1">&#34;additional&#34;</span> | wc -l
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">3</span><span><span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">4</span><span><span style="color:#6c7086;font-style:italic"># with my constraint elimination patch</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">5</span><span>$ cat ce2/with.txt | grep <span style="color:#a6e3a1">&#34;additional&#34;</span> | wc -l
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">6</span><span><span style="color:#fab387">78</span></span></span></code></pre></div>
<p>We expected that the extra facts could trigger more replacements. However, the total number of replace count is the same.</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 1</span><span><span style="color:#6c7086;font-style:italic"># without my patch</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 2</span><span>$ ./perform.sh ce/without.txt
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 3</span><span>1: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 4</span><span><span style="color:#fab387">30428</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 5</span><span>2: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 6</span><span><span style="color:#fab387">517</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 7</span><span>3: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 8</span><span><span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 9</span><span>4: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">10</span><span><span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">11</span><span>5: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">12</span><span><span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">13</span><span>6: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">14</span><span><span style="color:#fab387">7</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">15</span><span>7: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">16</span><span><span style="color:#fab387">7</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">17</span><span>total replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">18</span><span><span style="color:#fab387">30959</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">19</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">20</span><span><span style="color:#6c7086;font-style:italic"># with my constraint elimination patch</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">21</span><span>$ ./perform.sh ce/with.txt
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">22</span><span>1: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">23</span><span><span style="color:#fab387">30428</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">24</span><span>2: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">25</span><span><span style="color:#fab387">517</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">26</span><span>3: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">27</span><span><span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">28</span><span>4: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">29</span><span><span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">30</span><span>5: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">31</span><span><span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">32</span><span>6: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">33</span><span><span style="color:#fab387">7</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">34</span><span>7: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">35</span><span><span style="color:#fab387">7</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">36</span><span>total replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">37</span><span><span style="color:#fab387">30959</span></span></span></code></pre></div>
<h4 id="building-rust-nightly">Building Rust nightly</h4>
<p>The result of the first experiment didn&rsquo;t meet what we expected, so we decided to see the result when compiling Rust.</p>
<p>As of writing, Rust nightly supports LLVM 20.x, so I had to rebuild my patch on top of LLVM 20. Luckily, there were no conflicts when I applied my updates to LLVM 20.x branch.</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 1</span><span><span style="color:#6c7086;font-style:italic"># bootstrap.toml for building rustc</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 2</span><span>change-id <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#a6e3a1">&#34;ignore&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 4</span><span><span style="color:#89dceb;font-weight:bold">[</span>target.x86_64-unknown-linux-gnu<span style="color:#89dceb;font-weight:bold">]</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 5</span><span><span style="color:#6c7086;font-style:italic"># set external llvm-config to get our locally built LLVM binaries</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 6</span><span>llvm-config <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#a6e3a1">&#34;/home/lee/dev/llvm-project/build/bin/llvm-config&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 8</span><span><span style="color:#89dceb;font-weight:bold">[</span>llvm<span style="color:#89dceb;font-weight:bold">]</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 9</span><span>download-ci-llvm <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#89dceb">false</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">10</span><span>link-shared <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#89dceb">false</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">11</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">12</span><span><span style="color:#89dceb;font-weight:bold">[</span>build<span style="color:#89dceb;font-weight:bold">]</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">13</span><span><span style="color:#f5e0dc">extended</span> <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#89dceb">true</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">14</span><span><span style="color:#6c7086;font-style:italic"># this needs to set to false, or rustc will try to build from in-tree LLVM</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">15</span><span>optimized-compiler-builtins <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#89dceb">false</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">16</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">17</span><span><span style="color:#89dceb;font-weight:bold">[</span>rust<span style="color:#89dceb;font-weight:bold">]</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">18</span><span><span style="color:#f5e0dc">channel</span> <span style="color:#89dceb;font-weight:bold">=</span> <span style="color:#a6e3a1">&#34;nightly&#34;</span></span></span></code></pre></div>
<p>Build stage2 <code>rustc</code> and <code>libstd</code>.</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">1</span><span><span style="color:#6c7086;font-style:italic"># without my patch</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">2</span><span>./x.py build --stage <span style="color:#fab387">2</span> 2&gt;&amp;<span style="color:#fab387">1</span> | tee without.txt
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">3</span><span><span style="color:#6c7086;font-style:italic"># with my constraint elimination patch</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">4</span><span>./x.py build --stage <span style="color:#fab387">2</span> 2&gt;&amp;<span style="color:#fab387">1</span> | tee with.txt</span></span></code></pre></div>
<p>Like we expected, there were additional facts added when compiling rustc.</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">1</span><span>$ cat rust-ce/without.txt | grep <span style="color:#a6e3a1">&#34;additional&#34;</span> | wc -l
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">2</span><span><span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">3</span><span>$ cat rust-ce/with.txt | grep <span style="color:#a6e3a1">&#34;additional&#34;</span> | wc -l
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">4</span><span><span style="color:#fab387">304</span></span></span></code></pre></div>
<p>Finally, the result is similar to building LLVM. There was no difference in replacement count.</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 1</span><span><span style="color:#6c7086;font-style:italic"># without my patch</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 2</span><span>$ ./perform.sh rust-ce/without.txt
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 3</span><span>1: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 4</span><span><span style="color:#fab387">594755</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 5</span><span>2: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 6</span><span><span style="color:#fab387">57</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 7</span><span>3: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 8</span><span><span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 9</span><span>4: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">10</span><span><span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">11</span><span>5: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">12</span><span><span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">13</span><span>6: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">14</span><span><span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">15</span><span>7: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">16</span><span><span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">17</span><span>total replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">18</span><span><span style="color:#fab387">594812</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">19</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">20</span><span><span style="color:#6c7086;font-style:italic"># with my constraint elimination patch</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">21</span><span>$ ./perform.sh rust-ce/with.txt
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">22</span><span>1: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">23</span><span><span style="color:#fab387">594755</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">24</span><span>2: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">25</span><span><span style="color:#fab387">57</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">26</span><span>3: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">27</span><span><span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">28</span><span>4: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">29</span><span><span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">30</span><span>5: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">31</span><span><span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">32</span><span>6: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">33</span><span><span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">34</span><span>7: replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">35</span><span><span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">36</span><span>total replace count
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">37</span><span><span style="color:#fab387">594812</span></span></span></code></pre></div>
<p>Given that Rust performs many bounds checks, we can observe that it benefits significantly from the Constraint Elimination pass overall.</p>
<p>Despite successfully adding additional facts, the total number of replacements remained unchanged in both LLVM and Rust builds. It&rsquo;s unclear why this happened. One possible explanation is that these new facts did not intersect with any existing <code>icmp</code> checks eligible for replacement. Further investigation is needed to understand this behavior.</p>
<h3 id="future-work">Future Work</h3>
<p>Constraint Elimination is a fun and powerful transformation pass. There are still many missing optimizations that we can contribute. As we mentioned earlier, the current constraint system supports only logical AND for its constraints. This limitation prevents the system from learning facts expressed as <code>Fact1 || Fact2</code>. Supporting logical OR opens many optimization opportunities, such as <code>(LHS | RHS) &lt; 0 =&gt; LHS &lt; 0 || RHS &lt; 0</code>.</p>
<p>Currently, <code>ne</code> constraints are not supported in the constraint system. The reason is that <code>a != b</code> cannot be directly encoded as a single linear constraint â it represents a disjunction: <code>a &lt; b || a &gt; b</code>. However, the constraint system models all facts as conjunctions (logical ANDs) of linear inequalities. Without support for logical OR, it is not possible to store <code>ne</code> facts within the system. In contrast, <code>eq</code> facts like <code>a == b</code> can be represented as two inequalities: <code>a &lt;= b &amp;&amp; a &gt;= b</code>, both of which are individually expressible.</p>
<h3 id="conclusion">Conclusion</h3>
<p>I only worked on a certain part of the Constraint Elimination pass. There is still more to discover inside this pass, such as, adding facts for loop induction variables. Lastly, I want to express my gratitude to Dr. John Regehr for his valuable advice on this project. Thanks, John!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Spring 2025: CS 6950 Compiler Independent Study</title>
      <link>https://leewei.co/cs6950/</link>
      <pubDate>Sun, 13 Apr 2025 10:34:52 -0700</pubDate><author>lee10202013@gmail.com (Lee Wei)</author>
      <guid>https://leewei.co/cs6950/</guid>
      <description>Last semester, I started contributing to LLVM by adding a missing InstCombine optimization and fixing several Undefined Behavior tests. As I became more familiar with LLVM, I wanted to contribute more impactful patches. Therefore, I asked John to advise me on doing an independent study on compilers this semester.
Planning Here are the initial project options:
LLVM Constraint Elimination missing optimization: support eq/ne and bitwise AND/OR constraints. There are two open issues that I could work on: eq/ne, bitwise AND/OR LLVM backend AArch64 optimization MLIR Synthesizer I chose to work on Constraint Elimination because I was more familiar with the development process for LLVM middle-end.</description>
      <content:encoded><![CDATA[<p>Last semester, I started contributing to LLVM by adding a missing InstCombine optimization and fixing several Undefined Behavior tests. As I became more familiar with LLVM, I wanted to contribute more impactful patches. Therefore, I asked John to advise me on doing an independent study on compilers this semester.</p>
<h3 id="planning">Planning</h3>
<p>Here are the initial project options:</p>
<ul>
<li>LLVM Constraint Elimination missing optimization: support <code>eq</code>/<code>ne</code> and bitwise <code>AND</code>/<code>OR</code> constraints.
<ul>
<li>There are two open issues that I could work on: <a href="https://github.com/llvm/llvm-project/issues/117961">eq/ne</a>, <a href="https://github.com/llvm/llvm-project/issues/118114">bitwise AND/OR</a></li>
</ul>
</li>
<li>LLVM backend AArch64 optimization</li>
<li>MLIR Synthesizer</li>
</ul>
<p>I chose to work on Constraint Elimination because I was more familiar with the development process for LLVM middle-end. The initial goal is to merge four PRs by the end of the semester.</p>
<h4 id="timeline">Timeline</h4>
<ul>
<li>4 weeks(1/6 ~ 1/31): discuss project scope, read code and test tools</li>
<li>11 weeks(2/3 ~ 4/16): implementation and testing</li>
<li>1 week(4/16 ~ 4/23): write final report</li>
</ul>
<h3 id="constraint-elimination">Constraint Elimination</h3>
<p>I wrote a blog post that introduces <a href="https://leewei05.github.io/llvm-constraint">Constraint Elimination</a>.</p>
<h3 id="testing-and-fuzzing">Testing and Fuzzing</h3>
<p>With so many patches committed to LLVM every day, itâs crucial to verify that my implementation does the right thing and doesnât introduce new bugs. During this project, I learned several methods to help verify the correctness of my implementation.</p>
<h4 id="alive2-for-mathematical-proof">Alive2 for mathematical proof</h4>
<p><a href="https://github.com/AliveToolkit/alive2">Alive2</a> provides a fast and robust way to verify the correctness of LLVM transformations. Ever since it became available on <a href="https://alive2.llvm.org/ce/">Compiler Explorer</a>, it has become an essential tool for LLVM development. Having an <a href="https://llvm.org/docs/InstCombineContributorGuide.html#proofs">Alive2 proof link</a> is a requirement for submitting InstCombine PRs.</p>
<p>Before implementation, itâs helpful to use <a href="https://alive2.llvm.org/ce/z/roTijm">Alive2</a> to verify the correctness of updates. This gives developers confidence in their implementation and provides reviewers with a quick way to understand the proposed transformation.</p>
<h4 id="llvm-regression-tests">LLVM regression tests</h4>
<p><a href="https://llvm.org/docs/TestingGuide.html#regression-tests">LLVM regression tests</a> are located in the <code>llvm/test</code> directory. A regression test is a small piece of LLVM IR code that demonstrates a transformation. Before changing any tests, itâs recommended to run the existing tests first to ensure there are no failures.</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 1</span><span>$ <span style="color:#89dceb">pwd</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 2</span><span>/Users/lee/dev/llvm-project/build
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 3</span><span>$ ninja -j <span style="color:#fab387">8</span> check-llvm
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 4</span><span><span style="color:#89dceb;font-weight:bold">[</span>841/842<span style="color:#89dceb;font-weight:bold">]</span> Running the LLVM regression tests
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 5</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 6</span><span>Testing Time: 11154.24s
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 8</span><span>Total Discovered Tests: <span style="color:#fab387">63868</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 9</span><span>  Skipped          :   <span style="color:#fab387">359</span> <span style="color:#89dceb;font-weight:bold">(</span>0.56%<span style="color:#89dceb;font-weight:bold">)</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">10</span><span>  Unsupported      : <span style="color:#fab387">30198</span> <span style="color:#89dceb;font-weight:bold">(</span>47.28%<span style="color:#89dceb;font-weight:bold">)</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">11</span><span>  Passed           : <span style="color:#fab387">33238</span> <span style="color:#89dceb;font-weight:bold">(</span>52.04%<span style="color:#89dceb;font-weight:bold">)</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">12</span><span>  Expectedly Failed:    <span style="color:#fab387">73</span> <span style="color:#89dceb;font-weight:bold">(</span>0.11%<span style="color:#89dceb;font-weight:bold">)</span></span></span></code></pre></div>
<p>We then add our LLVM IR snippet to either an existing or a new <code>.ll</code> test file.</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 1</span><span><span style="color:#6c7086;font-style:italic">// before
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 2</span><span><span style="color:#6c7086;font-style:italic"></span>define <span style="color:#f38ba8">void</span> <span style="color:#f38ba8">@</span>test_decompose_bitwise_and(i4 <span style="color:#89dceb;font-weight:bold">%</span>x, i4 <span style="color:#89dceb;font-weight:bold">%</span>y) {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 3</span><span><span style="color:#89dceb">entry</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 4</span><span>  <span style="color:#89dceb;font-weight:bold">%</span>and<span style="color:#fab387">.1</span> <span style="color:#89dceb;font-weight:bold">=</span> and i4 <span style="color:#89dceb;font-weight:bold">%</span>y, <span style="color:#89dceb;font-weight:bold">%</span>x
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 5</span><span>  <span style="color:#89dceb;font-weight:bold">%</span>c<span style="color:#fab387">.1</span><span style="color:#89dceb;font-weight:bold">=</span> icmp slt i4 <span style="color:#89dceb;font-weight:bold">%</span>and<span style="color:#fab387">.1</span>, <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 6</span><span>  br i1 <span style="color:#89dceb;font-weight:bold">%</span>c<span style="color:#fab387">.1</span>, label <span style="color:#89dceb;font-weight:bold">%</span>then, label <span style="color:#89dceb;font-weight:bold">%</span>end
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 8</span><span><span style="color:#89dceb">then</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 9</span><span>  ; <span style="color:#89dceb">fact</span>: <span style="color:#89dceb;font-weight:bold">%</span>and<span style="color:#fab387">.1</span> <span style="color:#89dceb;font-weight:bold">&lt;</span> <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">10</span><span>  <span style="color:#89dceb;font-weight:bold">%</span>t<span style="color:#fab387">.1</span> <span style="color:#89dceb;font-weight:bold">=</span> icmp slt i4 <span style="color:#89dceb;font-weight:bold">%</span>x, <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">11</span><span>  <span style="color:#89dceb;font-weight:bold">%</span>t<span style="color:#fab387">.2</span> <span style="color:#89dceb;font-weight:bold">=</span> icmp slt i4 <span style="color:#89dceb;font-weight:bold">%</span>y, <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">12</span><span>  call <span style="color:#f38ba8">void</span> <span style="color:#f38ba8">@</span>use(i1 <span style="color:#89dceb;font-weight:bold">%</span>t<span style="color:#fab387">.1</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">13</span><span>  call <span style="color:#f38ba8">void</span> <span style="color:#f38ba8">@</span>use(i1 <span style="color:#89dceb;font-weight:bold">%</span>t<span style="color:#fab387">.2</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">14</span><span>  ret <span style="color:#f38ba8">void</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">15</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">16</span><span><span style="color:#89dceb">end</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">17</span><span>  ret <span style="color:#f38ba8">void</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">18</span><span>}</span></span></code></pre></div>
<p>Then, we run the following command, where <code>update_test_checks.py</code> will apply transformations to our target file <code>and.ll</code>:</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">1</span><span>$ <span style="color:#89dceb">pwd</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">2</span><span>/Users/lee/dev/llvm-project/build
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">3</span><span>$ ../llvm/utils/update_test_checks.py --opt-binary<span style="color:#89dceb;font-weight:bold">=</span>./bin/opt ../llvm/test/Transforms/ConstraintElimination/and.ll</span></span></code></pre></div>
<p>We verify the transformation in the LLVM IR using the <code>CHECK-</code> prefixes and confirm the result matches Alive2âs output.</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 1</span><span><span style="color:#6c7086;font-style:italic">// after
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 2</span><span><span style="color:#6c7086;font-style:italic"></span>define <span style="color:#f38ba8">void</span> <span style="color:#f38ba8">@</span>test_decompose_bitwise_and(i4 <span style="color:#89dceb;font-weight:bold">%</span>x, i4 <span style="color:#89dceb;font-weight:bold">%</span>y) {
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 3</span><span>; CHECK<span style="color:#89dceb;font-weight:bold">-</span><span style="color:#89dceb">LABEL</span>: <span style="color:#f38ba8">@</span>test_decompose_bitwise_and(
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 4</span><span>; CHECK<span style="color:#89dceb;font-weight:bold">-</span><span style="color:#89dceb">NEXT</span>:  <span style="color:#89dceb">entry</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 5</span><span>; CHECK<span style="color:#89dceb;font-weight:bold">-</span><span style="color:#89dceb">NEXT</span>:    <span style="color:#89b4fa">[[TMP0:%.*]] = and i4 [[Y:%.*]], [[X:%.*]]</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 6</span><span>; CHECK<span style="color:#89dceb;font-weight:bold">-</span><span style="color:#89dceb">NEXT</span>:    <span style="color:#89b4fa">[[AND:%.*]] = icmp slt i4 [[TMP0]]</span>, <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 7</span><span>; CHECK<span style="color:#89dceb;font-weight:bold">-</span><span style="color:#89dceb">NEXT</span>:    br i1 <span style="color:#89b4fa">[[AND]], label [[BB1:%.*]], label [[EXIT:%.*]]</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 8</span><span>; <span style="color:#89dceb">CHECK</span>:       <span style="color:#89dceb">then</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 9</span><span>; CHECK<span style="color:#89dceb;font-weight:bold">-</span><span style="color:#89dceb">NEXT</span>:    call <span style="color:#f38ba8">void</span> <span style="color:#f38ba8">@</span>use(i1 <span style="color:#89dceb">true</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">10</span><span>; CHECK<span style="color:#89dceb;font-weight:bold">-</span><span style="color:#89dceb">NEXT</span>:    call <span style="color:#f38ba8">void</span> <span style="color:#f38ba8">@</span>use(i1 <span style="color:#89dceb">true</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">11</span><span>; CHECK<span style="color:#89dceb;font-weight:bold">-</span><span style="color:#89dceb">NEXT</span>:    ret <span style="color:#f38ba8">void</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">12</span><span>; <span style="color:#89dceb">CHECK</span>:       <span style="color:#89dceb">end</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">13</span><span>; CHECK<span style="color:#89dceb;font-weight:bold">-</span><span style="color:#89dceb">NEXT</span>:    ret <span style="color:#f38ba8">void</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">14</span><span>;
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">15</span><span>...
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">16</span><span>}</span></span></code></pre></div>
<p>Our tests should cover both positive and negative casesâincluding simple and complex scenarios. Designing strong test cases ensures the implementation behaves as expected and avoids regressions. Also, we should run the entire LLVM regression tests after adding our tests.</p>
<h4 id="yarpgen-for-fuzzing">YARPGen for fuzzing</h4>
<p><a href="https://github.com/intel/yarpgen/tree/v1"><code>YARPGen</code></a> is a fuzzer that randomly generates valid C/C++ programs to test compilers. The setup is straightforwardâchange the clang path in <code>test_sets.txt</code> and run <code>./run_gen.py</code>. I tested both <code>yarpgen v1</code> and <code>yarpgen v2 (branch stable)</code> to see which one triggered my patch more often. Version 1 triggered it significantly more.</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">1</span><span>// Number of <span style="color:#89dceb">times</span> yarpgen triggered my patch
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">2</span><span>lee@Lee ~/d/test&gt; cat yarpgen_v1.log | grep <span style="color:#a6e3a1">&#34;additional&#34;</span> | wc -l
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">3</span><span><span style="color:#fab387">182</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">4</span><span>lee@Lee ~/d/test&gt; cat yarpgen_v2.log | grep <span style="color:#a6e3a1">&#34;additional&#34;</span> | wc -l
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">5</span><span><span style="color:#fab387">0</span></span></span></code></pre></div>
<p>I ran two experiment:</p>
<ol>
<li>I ran <code>yarpgen v1</code> against my patch for several days on a 12-core machine. The goal was to ensure that no miscompilations occurred (i.e., zero compfail).</li>
</ol>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 1</span><span><span style="color:#6c7086;font-style:italic">##########################</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 2</span><span>YARPGEN runs stat:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 3</span><span>Time: 2025/03/13 08:44:06
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 4</span><span>duration: <span style="color:#fab387">4</span> d 18:27:25
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 5</span><span>testing speed: 3.72 seed/min
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 7</span><span><span style="color:#6c7086;font-style:italic">##########################</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 8</span><span>generator stat:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 9</span><span>cpu time: <span style="color:#fab387">0</span> d 5:10:16
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">10</span><span>        total : <span style="color:#fab387">25574</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">11</span><span>        ok : <span style="color:#fab387">25574</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">12</span><span>        runfail_timeout : <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">13</span><span>        runfail : <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">14</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">15</span><span><span style="color:#6c7086;font-style:italic">##########################</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">16</span><span>clang_no_opt stat:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">17</span><span>        cpu time: <span style="color:#fab387">19</span> d 3:2:24
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">18</span><span>        total : <span style="color:#fab387">25572</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">19</span><span>        ok : <span style="color:#fab387">25552</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">20</span><span>        compfail_timeout : <span style="color:#fab387">20</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">21</span><span>        compfail : <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">22</span><span>        runfail_timeout : <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">23</span><span>        runfail : <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">24</span><span>        different_output : <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">25</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">26</span><span><span style="color:#6c7086;font-style:italic">##########################</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">27</span><span>clang_opt stat:
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">28</span><span>        cpu time: <span style="color:#fab387">30</span> d 17:48:39
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">29</span><span>        total : <span style="color:#fab387">25562</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">30</span><span>        ok : <span style="color:#fab387">25485</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">31</span><span>        compfail_timeout : <span style="color:#fab387">77</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">32</span><span>        compfail : <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">33</span><span>        runfail_timeout : <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">34</span><span>        runfail : <span style="color:#fab387">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">35</span><span>        different_output : <span style="color:#f5e0dc">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">36</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">37</span><span><span style="color:#89dceb;font-weight:bold">=================================</span></span></span></code></pre></div>
<ol start="2">
<li>I purposely introduced a bug in my patch and reran <code>yarpgen v1</code>. It successfully found a miscompilation. However, the generated program was quite large, so I used <code>C-Reduce</code> to shrink it into a minimal test case.</li>
</ol>
<h4 id="c-reduce-to-minimize-program">C-Reduce to minimize program</h4>
<p><a href="https://github.com/csmith-project/creduce">C-Reduce</a> reduces a large C/C++ file into a smaller test case while preserving the bug. It does this using an <strong>interestingness test (a shell script)</strong>. As long as the test returns 0, the reduced program is still interesting.</p>
<p>For example, I considered the outputs below to be &ldquo;interesting&rdquo;:</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">1</span><span><span style="color:#6c7086;font-style:italic"># correct version</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">2</span><span><span style="color:#f5e0dc">$LLVM_HOME</span>/bin/clang++ -O3 <span style="color:#f5e0dc">$CXXFLAGS</span> driver.cpp func.cpp init.h <span style="color:#89dceb;font-weight:bold">&amp;&amp;</span> ./a.out
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">3</span><span><span style="color:#fab387">9133052109159997938</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">5</span><span><span style="color:#6c7086;font-style:italic"># miscompilation</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">6</span><span><span style="color:#f5e0dc">$LLVM_HOME</span>/bin/clang++ -O3 <span style="color:#f5e0dc">$CXXFLAGS</span> driver.cpp func.cpp init.h <span style="color:#89dceb;font-weight:bold">&amp;&amp;</span> ./a.out
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">7</span><span><span style="color:#fab387">7336395106169927387</span></span></span></code></pre></div>
<p>I would like the miscompiled result to be different from the correct version, and that would be <code>interesting</code> for this test case. Therefore, I wrote this <code>test1.sh</code> to reduce the generated program. There are several details in this shell script.</p>
<ol>
<li>Enabling UBSan during compilation is essential, as we donât want C-Reduce to minimize a program that exhibits undefined behavior. This requires compiling LLVM with <code>compiler-rt</code> enabled.</li>
<li>Precompile <code>driver.cpp</code> and link it separately to reduce overall compile time during test case reduction.</li>
<li>Set <code>ulimit</code> for both virtual memory and CPU time to prevent resource exhaustion.</li>
</ol>
<p>Hereâs the <code>test1.sh</code> script I used with C-Reduce:</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 1</span><span><span style="color:#6c7086;font-style:italic">#!/bin/bash
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 2</span><span><span style="color:#6c7086;font-style:italic"></span><span style="color:#89dceb">set</span> -x
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 3</span><span><span style="color:#89dceb">ulimit</span> -t <span style="color:#fab387">800</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 4</span><span><span style="color:#89dceb">ulimit</span> -v <span style="color:#fab387">2000000</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 5</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 6</span><span><span style="color:#f5e0dc">LOGFILE</span><span style="color:#89dceb;font-weight:bold">=</span><span style="color:#a6e3a1">&#34;script.log&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 7</span><span><span style="color:#89dceb">exec</span> &gt; <span style="color:#a6e3a1">&#34;</span><span style="color:#f5e0dc">$LOGFILE</span><span style="color:#a6e3a1">&#34;</span> 2&gt;&amp;<span style="color:#fab387">1</span>  <span style="color:#6c7086;font-style:italic"># Redirect both stdout and stderr to the log file</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 8</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c"> 9</span><span><span style="color:#6c7086;font-style:italic"># Compile both versions</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">10</span><span>/home/lee/dev/llvm-project/build/bin/clang++ -O3 -Xclang -disable-llvm-optzns <span style="color:#89b4fa">\
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">11</span><span><span style="color:#89b4fa"></span>    -fsanitize<span style="color:#89dceb;font-weight:bold">=</span>undefined -fno-sanitize-recover<span style="color:#89dceb;font-weight:bold">=</span>undefined func.cpp driver.o -o no_opt <span style="color:#89dceb;font-weight:bold">||</span> <span style="color:#89dceb;font-weight:bold">{</span> <span style="color:#89dceb">echo</span> <span style="color:#a6e3a1">&#34;Compilation of no_opt failed!&#34;</span> &gt;&amp;2; <span style="color:#89dceb">exit</span> 1; <span style="color:#89dceb;font-weight:bold">}</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">12</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">13</span><span>/home/lee/dev/llvm-project/build/bin/clang++ -O3 <span style="color:#89b4fa">\
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">14</span><span><span style="color:#89b4fa"></span>    -fsanitize<span style="color:#89dceb;font-weight:bold">=</span>undefined -fno-sanitize-recover<span style="color:#89dceb;font-weight:bold">=</span>undefined func.cpp driver.o -o opt <span style="color:#89dceb;font-weight:bold">||</span> <span style="color:#89dceb;font-weight:bold">{</span> <span style="color:#89dceb">echo</span> <span style="color:#a6e3a1">&#34;Compilation of opt failed!&#34;</span> &gt;&amp;2; <span style="color:#89dceb">exit</span> 1; <span style="color:#89dceb;font-weight:bold">}</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">15</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">16</span><span><span style="color:#6c7086;font-style:italic"># Run both versions</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">17</span><span>./no_opt <span style="color:#89dceb;font-weight:bold">||</span> <span style="color:#89dceb;font-weight:bold">{</span> <span style="color:#89dceb">echo</span> <span style="color:#a6e3a1">&#34;Execution of no_opt failed!&#34;</span> &gt;&amp;2; <span style="color:#89dceb">exit</span> 1; <span style="color:#89dceb;font-weight:bold">}</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">18</span><span>./opt <span style="color:#89dceb;font-weight:bold">||</span> <span style="color:#89dceb;font-weight:bold">{</span> <span style="color:#89dceb">echo</span> <span style="color:#a6e3a1">&#34;Execution of opt failed!&#34;</span> &gt;&amp;2; <span style="color:#89dceb">exit</span> 1; <span style="color:#89dceb;font-weight:bold">}</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">19</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">20</span><span><span style="color:#6c7086;font-style:italic"># Compare outputs</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">21</span><span>! diff &lt;<span style="color:#89dceb;font-weight:bold">(</span>./no_opt<span style="color:#89dceb;font-weight:bold">)</span> &lt;<span style="color:#89dceb;font-weight:bold">(</span>./opt<span style="color:#89dceb;font-weight:bold">)</span> <span style="color:#89dceb;font-weight:bold">||</span> <span style="color:#89dceb;font-weight:bold">{</span> <span style="color:#89dceb">echo</span> <span style="color:#a6e3a1">&#34;Outputs are the same, test case reduction is invalid!&#34;</span> &gt;&amp;2; <span style="color:#89dceb">exit</span> 1; <span style="color:#89dceb;font-weight:bold">}</span></span></span></code></pre></div>
<p>After C-Reduce, the program was small enough to inspect and reduce by hand. Hereâs the final <a href="https://gcc.godbolt.org/z/EP9YMGosv">func.cpp</a>. The incorrect patch optimized any bitwise OR compared with 0, regardless of the predicate. Hereâs the <a href="https://alive2.llvm.org/ce/z/SBJ5W8">Alive2 proof</a> comparing correct and incorrect versions.</p>
<p>These testing and fuzzing tools gave me much more confidence in my implementation and helped prepare it for a Pull Request.</p>
<h3 id="conclusion">Conclusion</h3>
<p>Here&rsquo;s three PRs I submitted:</p>
<ul>
<li>(Closed) <a href="https://github.com/llvm/llvm-project/pull/126158">https://github.com/llvm/llvm-project/pull/126158</a></li>
<li>(Merged) <a href="https://github.com/llvm/llvm-project/pull/127351">https://github.com/llvm/llvm-project/pull/127351</a></li>
<li>(Under review) <a href="https://github.com/llvm/llvm-project/pull/132124">https://github.com/llvm/llvm-project/pull/132124</a></li>
</ul>
<p>Even though I didnât manage to submit all four PRs, I learned a great deal from the development and testing process. My first PR wasnât implemented in the right place, and Iâve since learned the value of reaching out to LLVM developers earlier.</p>
<p>It was fun doing this project, and it made me learn to think like a compiler engineer. It isn&rsquo;t easy to work on compilers, especially an industrial-level compiler like LLVM, but it sure is rewarding when finally submitted a PR to LLVM. I would like to show my appreciation to Dr. John Regehr for advising me on this project. Thanks, John!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Spring 2025: CS 6460 Operating Systems</title>
      <link>https://leewei.co/cs6460/</link>
      <pubDate>Tue, 07 Jan 2025 16:38:37 -0700</pubDate><author>lee10202013@gmail.com (Lee Wei)</author>
      <guid>https://leewei.co/cs6460/</guid>
      <description>Week 1 Time sharing: a policy for processes to take turn to use the CPU. Hardware has a timer to send interrupts to the OS. Scheduling: choose process to run. Isolation: avoid process access other processes&amp;rsquo; data. File descriptor: an integer that maps to a file. Unix philosophy: everything is a file. Kernel maintains a file descriptor table. 0: stdin, 1: stdout, 2: stderr Week 2 fork(): create a new process.</description>
      <content:encoded><![CDATA[<h3 id="week-1">Week 1</h3>
<ul>
<li>Time sharing: a policy for processes to take turn to use the CPU.
<ul>
<li>Hardware has a timer to send interrupts to the OS.</li>
</ul>
</li>
<li>Scheduling: choose process to run.</li>
<li>Isolation: avoid process access other processes&rsquo; data.</li>
<li>File descriptor: an integer that maps to a file.
<ul>
<li>Unix philosophy: <em>everything is a file</em>.</li>
<li>Kernel maintains a file descriptor table.</li>
<li><code>0: stdin, 1: stdout, 2: stderr</code></li>
</ul>
</li>
</ul>
<h3 id="week-2">Week 2</h3>
<ul>
<li><code>fork()</code>: create a new process.</li>
<li><code>exec()</code>: replace memory of the current process.
<ul>
<li>It doesn&rsquo;t clear file descriptor.</li>
</ul>
</li>
<li>Pipe: redirect one process&rsquo; output into another process input.
<ul>
<li>parent: write to <code>p[1]</code>, close <code>p[0], p[1]</code></li>
<li>child: close stdin, duplicate <code>p[0]</code> close <code>p[0], p[1]</code></li>
</ul>
</li>
</ul>
<h3 id="week-3">Week 3</h3>
<ul>
<li><code>leave</code>: special instruction in x86, which return the old <code>ebp</code>.</li>
<li>Why do we need stack frames? They are not strictly required, but it is good to have them.
<ul>
<li>Stack contains return addresses of caller function.</li>
</ul>
</li>
<li><code>eax, edx</code>: the return value.</li>
<li><code>ebp</code>(frame pointer): points to the base of the frame.</li>
<li>variables:
<ul>
<li>Global variables: initialized(data section), uninitialized(BSS).</li>
<li>Dynamic variables: allocated on Heap memory.</li>
<li>Local variables: stack.</li>
</ul>
</li>
</ul>
<h3 id="week-4">Week 4</h3>
<ul>
<li>Linking: combines multiple object files into an executable or a library.
<ul>
<li>Pros</li>
<li>We can write our programs in modules.</li>
<li>Faster code compilation, since we only need to re-compile changed source files and link them to the final target.</li>
<li>Space efficient, since we can share common code.</li>
</ul>
</li>
<li>Loading: load executable into memory.</li>
<li>Relocation: merge sections of each object files into multiple sections in the final executable. Resolve any unknown memory addresses.</li>
<li>ELF format
<ul>
<li>Program header table: used by loader to load each segments into memory.</li>
<li>Section header table: used by linker to link code and data sections together.</li>
</ul>
</li>
<li>Statically linked: library is linked into the executable, which makes the size of the file larger.</li>
<li>Dynamically linked: library is loaded at runtime, which makes the size of the file smaller.</li>
<li>Position independent code(PIC): generate code in such a way that it can work no
matter where it is located in the address space.
<ul>
<li>Add additional layer of indirection for all references to global data, imported functions.</li>
<li>Global Offset Table(GOT): a table, which maintains by the linker, that stores the addresses of variables.</li>
</ul>
</li>
</ul>
<h3 id="week-5">Week 5</h3>
<ul>
<li>How to share one memory across multiple processes?
<ul>
<li>Relocation: process 1 starts from 0x00, process 2 starts from 0x1100.</li>
<li>This works but it lacks isolation. One process can easily access other processes&rsquo; memory.</li>
</ul>
</li>
<li>How can we enforce isolation?
<ul>
<li>Software: SFI(Software Fault Isolation) works, but it has performance overhead.</li>
<li>Hardware: segmentations add base addresses, which are maintained by the hardware, for each process. Hardware has a special register to keep an index into the table.
<ul>
<li>Global Descriptor Table: an array of segments(base and size) and access control flags.</li>
<li>GDT register points to the address of GDT in physical address.</li>
<li>Linear address(named by Intel): physical address = base(logical address) + offset(effective address)</li>
<li>Each process has a private GDT.</li>
</ul>
</li>
</ul>
</li>
<li>What if one process needs more memory and the increased memory section overlaps with another process?
<ul>
<li>Move the other process to another memory address, or swap it to disk. Both solutions are inefficient.</li>
</ul>
</li>
<li>Paging is an alternative solution for segmentation.
<ul>
<li>Instead of seeing memory as a contiguous area, OS treats them as multiple pages that map to frames on physical memory.</li>
<li>Each process has its own page table(page table directory and page tables).</li>
</ul>
</li>
<li>Implementation for Paging
<ul>
<li>Array</li>
<li>Array of arrays(Page table)</li>
</ul>
</li>
</ul>
<h3 id="week-6">Week 6</h3>
<ul>
<li>copy-on-write: OS only copies page tables only when one of parent, child writes.</li>
<li>What kind of services might disable page table?
<ul>
<li>Databases</li>
<li>In-memory key-value stores</li>
</ul>
</li>
<li>Does OS flush TLB after context-switching?
<ul>
<li>A tagged TLB can tag process id to avoid flushing TLB. Greater performance.</li>
</ul>
</li>
<li>System boot</li>
</ul>
<h3 id="week-7">Week 7</h3>
<ul>
<li>System boot
<ul>
<li>Intel ME powers first and reads initialization code from BIOS chip.</li>
<li>One of the logical processor is chosen as Bootstrap processor(BSP). Others will become application processors.</li>
<li>BSP starts reading instructions in the BIOS chip.</li>
<li>BSP starts without DRAM. Custom assembly code that uses no stack.</li>
</ul>
</li>
<li>System Management Mode: OS cannot access this region of memory. No way to disable this.</li>
<li>BIOS ends by loading a boot loader.</li>
<li>(xv6) BIOS starts executing instructions at address <code>0x7c00</code>.</li>
<li>Outline of the boot sequence:
<ul>
<li>Setup segmentation(data and code)</li>
<li>Switch to protection mode(16 to 32 bits)</li>
<li>Load GDT(global descriptor table)</li>
<li>Setup stack(part of C runtime)</li>
<li>Load kernel from disk(ELF)</li>
<li>Jump to kernel entry(set page as 4KB and setup page directory)</li>
<li>Setup page table</li>
<li>Setup high address stack <code>0x7c00</code> grows towards <code>0x0000</code></li>
<li>Jump to main</li>
</ul>
</li>
<li>Page table has two entries to map to the kernl
<ul>
<li>#1: 0x0:0x4MB</li>
<li>#2: 0x80000000:0x8040000</li>
</ul>
</li>
<li>Hardware wants the page table directory in register cr3.</li>
</ul>
<h3 id="week-8">Week 8</h3>
<ul>
<li>Why do we need the first page table entry? 0x0:0x4MB
<ul>
<li>After enabling page table, the kernel will continue executing on virtual address.</li>
<li>If we don&rsquo;t map the first page table, it will crash after enabling paging.</li>
</ul>
</li>
<li>Linker script specifies the memory address of each section.</li>
<li>Enforce isolation so that user processes cannot access each other and the kernel.</li>
<li>(xv6) Each process will have a 2GB user memory and 2GB kernel memory.</li>
<li>How to implement a memory allocator?
<ul>
<li>A bitmap that refers to pages. 0: available page, 1: not available page.</li>
<li>Maintain a free page lists.</li>
</ul>
</li>
<li>(xv6) There is an area of free memory after the kernel end where we can use to allocate kernel page table.</li>
<li>Map a region of virtual memory into page tables.
<ul>
<li>Start at 2GB, iterate memory by page, allocate page directory and pages, map pte with repected physcial address.</li>
</ul>
</li>
<li>Lowest 12 bits of the page table entry are used as modes.</li>
<li>Why do we need interrupt?
<ul>
<li>Timer</li>
<li>Hardware notification</li>
</ul>
</li>
<li>What do we save before handling interrupts?
<ul>
<li>CS(code segment registers)</li>
<li>EFLAG</li>
<li>EIP</li>
</ul>
</li>
<li>How do we handle interrupt?
<ul>
<li>Change the EIP to point to IDT(instruction descriptor table), which stores interrupt handlers.</li>
<li>Create an exception stack(new ESP) to save the states of the current running process.</li>
</ul>
</li>
<li>Interrupt requires no change of privilege level
<ul>
<li>run on kernel code(level 0)</li>
<li>kernel access unmapped page</li>
</ul>
</li>
<li>Interrupt requires change of privilege level
<ul>
<li>run on user code(level 3)</li>
</ul>
</li>
<li>How to return from an interrupt? <code>iret</code></li>
<li>CPL can only access less privileged level. DPL(Descriptor privileged level)
<ul>
<li>1: can access 1, 2, 3</li>
<li>3: can access 3</li>
</ul>
</li>
<li>Each page entry has a user bit. If it is set, only code with privilege level 3 can access. If not, then only level 0 can access.</li>
<li>Interrupt is allowed only if CPL is less than equal to DPL.</li>
<li>TSS(Task State Segment): SS, ESP0.</li>
</ul>
<h3 id="week-9">Week 9</h3>
<ul>
<li>Midterm recap
<ul>
<li>No: AI, Google Search</li>
<li>Yes: homework, quiz, compiler explorer</li>
<li>Lecture 1 - 7</li>
</ul>
</li>
<li>Be familiar with Unix system calls
<ul>
<li>read, write, open, dup, close</li>
</ul>
</li>
<li>Be familiar with x86 calling convention</li>
<li>Stack, BSS, data, heap</li>
<li>Relocation</li>
<li>Page Tables</li>
</ul>
<h3 id="week-11">Week 11</h3>
<ul>
<li>Each CPU has its own GDT, which is pointed by GDTR. One entry of GDT points to TSS, where it points to the kernel stack.</li>
<li>Segmentation in x86 doesn&rsquo;t protect kernel memory from user processes. Modern operating systems use page tables for isolation.</li>
<li>Maskable interrupt(external interrupt)</li>
<li>Syscall is a trap</li>
<li>Interrupt handler should save the current CPU state, so that it can resume after handling the interrupt.</li>
<li><code>iret</code> returns from interrupt and restore these five values <code>SS, ESP, EFLAGS, CS, EIP</code>.</li>
<li>Software interrupts can be used to implement system call.</li>
<li>xv6 passes system call number with EAX.</li>
</ul>
<h3 id="week-12">Week 12</h3>
<ul>
<li>How <code>exec()</code> works? It does not change the file descriptor.</li>
<li>Can the guard page catch every overflow?
<ul>
<li>Guard page is partially safe. It can help developers catch overflow allocation(e.g. a very large array).</li>
</ul>
</li>
<li>Why does a program pass itself(executable) as <code>argv[0]</code>?</li>
<li>Kernel page table</li>
<li>How to create the first process?</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Spring 2025: ECE 6545 Deep Learning with Image Analysis</title>
      <link>https://leewei.co/ece6545/</link>
      <pubDate>Tue, 07 Jan 2025 16:38:37 -0700</pubDate><author>lee10202013@gmail.com (Lee Wei)</author>
      <guid>https://leewei.co/ece6545/</guid>
      <description>Week 1 Object detection: boundary of the object, what is the object, where is the object. Semantic Segmentation: labels different sections. Linear Classifier: draw a line in a space to classify different types of data. Overfitting: the model matches the training set too closely, resulting in the model failing to predict correctly on new data. Image Classification challenges: resolution of image variables It is common to have more training data than testing data.</description>
      <content:encoded><![CDATA[<h3 id="week-1">Week 1</h3>
<ul>
<li>Object detection: boundary of the object, what is the object, where is the object.</li>
<li>Semantic Segmentation: labels different sections.</li>
<li>Linear Classifier: draw a line in a space to classify different types of data.</li>
<li>Overfitting: the model matches the training set too closely, resulting in the model failing to predict correctly on new data.</li>
<li>Image Classification challenges:
<ul>
<li>resolution of image</li>
<li>variables</li>
</ul>
</li>
<li>It is common to have more training data than testing data.</li>
<li>Class Imbalance: certain class only has limited amount of data.</li>
<li>K nearest neighbor classifier: find closest resemblance.
<ul>
<li>It is never used due to <strong>slowness</strong>, <strong>overfitting</strong></li>
</ul>
</li>
<li>Hyperparameter: parameters that are fixed during training.
<ul>
<li><code>k</code> in K nearest neighbor classifier is a hyperparameter.</li>
<li>k is usually a odd number to avoid ties when it comes to voting.</li>
</ul>
</li>
<li>Linear Decision boundary: a straight line, plane, or hyperplane that separates different classes in a feature space.</li>
</ul>
<h3 id="week-2">Week 2</h3>
<ul>
<li>Linear Regression: a line that separates different types of data.
<ul>
<li>Under mild condition, linear regression has an optimal solution.</li>
</ul>
</li>
<li>Mean Squared Error (MSE): Average of the squared differences between observed and predicted values.
<ul>
<li>Good for linear regression.</li>
</ul>
</li>
<li>Supervised Learning: train model with training set and maps input to output while minimizing errors.</li>
<li>How to find the minimum with reference to <code>w</code>?
<ul>
<li>Differential MSE with w = 0</li>
</ul>
</li>
<li>Polynomial Regression: a curve line that separates different data.</li>
<li>Machine Learn Assumption: training set is drawn from the same probability distribution as test data.
<ul>
<li>Example: train a model based on the heights of 6 - 12 years olds, but the test data are the heights of 18 - 24 years olds. The model will not generalize well.</li>
<li><strong>Ultimate Goal:</strong> has as small errors as possible.</li>
</ul>
</li>
<li>Regularization is a technique used in machine learning to prevent overfitting by introducing additional constraints or penalties to the model&rsquo;s loss function.</li>
<li>Maximum Likelihood Estimation: find the parameter that maximizes the likelihood of the observed data under a given probabilistic model.
<ul>
<li>MLE estimates often converge to the expected value of the true parameter.</li>
<li>MLE is found by taking the derivative of the log-likelihood and solving for zero.</li>
<li>MLE is asymptotically unbiased but may be biased in small samples.</li>
<li>MLE has the lowest variance possible asymptotically (efficient estimator).</li>
<li>MLE is equivalent to minimizing KL divergence(minimize between 2 distributions).</li>
</ul>
</li>
<li>Binary Classification: predicting between two classes.</li>
<li>Cross-Entropy Loss: Measures the difference between predicted and actual labels. It ensures that high-confidence incorrect predictions get large gradients (forcing corrections).</li>
<li>Squash Function (Sigmoid): Converts raw scores to probabilities (0 to 1).
<ul>
<li>Divide each output by the sum of all outputs. What happens if the sum is negative? Exponential.</li>
</ul>
</li>
</ul>
<h3 id="week-3">Week 3</h3>
<ul>
<li>SoftMax: transforms outputs into probabilities, ensures probabilities sum is 1.</li>
<li>ReLU(Rectified Linear Unit): ReLU(x) = max(x, 0). It removes any negative values and keep positive values.</li>
<li>Goal: use neurual network to linear separate samples.
<ul>
<li>The more hidden layers you have, a much larger set of problems you can approximate.</li>
<li>Don&rsquo;t put sigmoid functions in the middent of the hidden layers, but it can be used on output layers.</li>
</ul>
</li>
<li>Loss functions:
<ul>
<li>MSE: regression</li>
<li>BCE(Binary Cross Entropy): binary classification</li>
<li>Cross Entropy: multi-class labels</li>
</ul>
</li>
<li>Several approach for training neurual networks:
<ul>
<li>Batch Descent</li>
<li>Stochastic gradient descent: one sample at a time(epoch one iteration), converge faster.</li>
<li>Mini Batch: each epoch is limited to B samples.</li>
</ul>
</li>
<li>Computational Graph</li>
</ul>
<h3 id="week-4">Week 4</h3>
<ul>
<li>Forward Pass: input data moves through data in a neurual network.</li>
<li>Backward Pass (Backpropagation): computing gradients using the chain rule.</li>
<li>Weight Updates: adjusting weights based on the gradients using optimization techniques like Stochastic Gradient Descent (SGD).</li>
<li>Activation Functions: Non-linearity in hidden layers (e.g., ReLU, sigmoid).</li>
<li>Batch Processing: concepts of minibatch to speed up the process.</li>
</ul>
<h3 id="week-5">Week 5</h3>
<ul>
<li>CNN</li>
<li>Cross-correlation v.s Convolution</li>
</ul>
<h3 id="week-6">Week 6</h3>
<ul>
<li>Max pooling</li>
<li>Stride</li>
<li>Conv -&gt; ReLU -&gt; Pooling</li>
<li>Regularization: L2 penalty</li>
<li>Global average pooling can replace flattening.</li>
<li>Backprop for CNNs
<ul>
<li>Local derivative for max pooling.</li>
<li>Local derivative for convolution layer. Similiar front convolutional operation, compute the downstream gradient and apply the filter downstream.</li>
</ul>
</li>
</ul>
<h3 id="week-7">Week 7</h3>
<ul>
<li>PyTorch</li>
<li>CNN</li>
</ul>
<h3 id="week-8">Week 8</h3>
<ul>
<li>Data preprocessing</li>
<li>Batch Normalization is a technique that improves speed(especially if training is deep) and stability for training neurual networks.</li>
<li>What is Normalization?
<ul>
<li>Re-centering and re-scaling layer&rsquo;s input.</li>
</ul>
</li>
<li>Parameter initialization</li>
<li>Regularization
<ul>
<li>L2 Regularization(weight decay)</li>
<li>Dropout</li>
</ul>
</li>
<li>Hyperparameter search
<ul>
<li>Grid search: train entire dataset with small epoch</li>
<li>Random search</li>
</ul>
</li>
</ul>
<h3 id="week-9">Week 9</h3>
<ul>
<li>Image Analysis</li>
<li>Object Localization
<ul>
<li>Bounding box</li>
<li>Height</li>
</ul>
</li>
<li>Model
<ul>
<li>CNN -&gt; flatten -&gt; softmax classification</li>
<li>
<pre><code>           -&gt; f.c linear activation
</code></pre>
</li>
<li>Add cross-entropy loss of classification and mse loss * lambda(to adjust the loss)</li>
<li>multitask learning</li>
</ul>
</li>
<li>Transfer Learning
<ul>
<li>Limitation</li>
</ul>
</li>
<li>What if there are mutliple objects?</li>
<li>R-CNN region based CNN</li>
<li>Fast R-CNN</li>
<li>Faster R-CNN</li>
</ul>
<h3 id="week-12">Week 12</h3>
<ul>
<li>Transpose Convolution</li>
<li>Why are we do downsampling?</li>
<li>U-net</li>
<li>Mask R-CNN</li>
<li>Self-Supervised Learning
<ul>
<li>Transfer learning</li>
<li>feature extractor</li>
<li>Rotation</li>
<li>Pretext tasks: cut image into different segments. These tasks need to be hard to let the model train better.</li>
</ul>
</li>
<li>Contrastive Representaion</li>
<li>Character-level Language Model</li>
<li>Vanilla RNN Gradient Flow</li>
<li>LSTM(Long Short Term Memory)</li>
<li>Attention</li>
</ul>
<h3 id="week-14">Week 14</h3>
<ul>
<li>Self Attention Layer</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Fall 2024: CS 6810 Computer Architecture</title>
      <link>https://leewei.co/cs6810/</link>
      <pubDate>Thu, 05 Dec 2024 20:47:54 -0600</pubDate><author>lee10202013@gmail.com (Lee Wei)</author>
      <guid>https://leewei.co/cs6810/</guid>
      <description>Week 1 Introduction and metrics
Week 2 Metrics and ISA
Week 3 To improve the performance of a processor, we introduce a technique called Pipelining. Pipelining splits instructions into multiple stages. Ideally, Throughput increases by a factor of # of the stages.
Pipeling are usually 5 stages: IF, ID, EXE, MEM, WB.
Instruction Fetch(IF): fetch instruction from memory and PC = PC + 4. Instruction Decode(ID): read registers from register file and sign extension for immediate value.</description>
      <content:encoded><![CDATA[<h3 id="week-1">Week 1</h3>
<p>Introduction and metrics</p>
<h3 id="week-2">Week 2</h3>
<p>Metrics and ISA</p>
<h3 id="week-3">Week 3</h3>
<p>To improve the performance of a processor, we introduce a technique called <code>Pipelining</code>.
<code>Pipelining</code> splits instructions into multiple stages. Ideally, Throughput increases by a factor of # of the stages.</p>
<p>Pipeling are usually 5 stages: IF, ID, EXE, MEM, WB.</p>
<ol>
<li>Instruction Fetch(IF): fetch instruction from memory and PC = PC + 4.</li>
<li>Instruction Decode(ID): read registers from register file and sign extension for immediate value.</li>
<li>Execution(EXE): execute the instruction with one input register 0 and either register 1 or immediate value. Computing branch can also be in this stage.</li>
<li>Access Memory(MEM): execute load or store instruction.</li>
<li>Write Back(WB): write value back to register file.</li>
</ol>
<p>Each stage has a buffer that passes information to the next stage. These buffers are controlled by controlling signals.</p>
<p>One problem for pipelining is to balance the clock period of each stage since the lowest circuit delay determines the clock cycle.</p>
<h3 id="week-4">Week 4</h3>
<p>Pipeline Hazards are events that restrict the pipeline flow.</p>
<ol>
<li>Structural Hazard: resource conflicts. For instance, processor with one memory unit could have structural hazard when fetching instruction and executing memory instruction at the same time.</li>
<li>Data Hazard:</li>
<li>Control Hazard:</li>
</ol>
<p>Static branch predictor: fixed prediction.</p>
<h3 id="week-5">Week 5</h3>
<p>Scoreboarding is a technique for allowing instructions to execute out of order when there are sufficient resources and no data dependences. It utilizes in-order issues.</p>
<p>Scoreboarding limitation</p>
<ul>
<li>Structural hazard: functional units are busy for the current instruction.</li>
<li>Resolving WAW, RAW, WAR with stalls.</li>
<li>Registers are only read when they are both available.</li>
</ul>
<p>Main idea:</p>
<ul>
<li>Split ID into two stages:
<ul>
<li>Issue: decode instruction, check for structural hazard and WAW.</li>
<li>Read operands: wait until no RAW hazard, read data from registers.</li>
</ul>
</li>
<li>Execution</li>
<li>Write Back: check for WAR</li>
</ul>
<h3 id="week-6">Week 6</h3>
<p>Tomasulo&rsquo;s Algorithm</p>
<ul>
<li>Reservation stations: a buffer infront of every function unit, so that processor doesn&rsquo;t stall when there&rsquo;s structural hazard.</li>
<li>Register renaming: read value for operands without reading from register file. These renaming data are stored in the rename table.</li>
<li>A common data bus(CDB) connects every reservation station.</li>
</ul>
<p>Tomasulo limitation</p>
<ul>
<li>Branch stall execution. Tomasulo doesn&rsquo;t allow branch prediction. It waits until branch is resolved.</li>
<li>Loads and stores are performed in order.</li>
</ul>
<p>How can we support branch prediction - speculation execution</p>
<p>Multi-issue processors</p>
<ul>
<li>Superscalar: instructions are chosen dynamically by the hardware.</li>
<li>VLIW: instructions are chosen statically by the compiler. Intel Itanium</li>
</ul>
<p>For Tomasulo algorithm, we cannot tell which instructions are after branch instruction due to out-of-order execution.</p>
<ol>
<li>Identify instructions after the branch.</li>
<li>Exception in specualtive code should be buffered before actually raising the exception.</li>
<li>Precise exception: when a exception is raised, all instructions after the exception are squashed.</li>
</ol>
<p>Add a reorder buffer to keep track the original order when issuing instructions.</p>
<p>Issue inorder -&gt; Execute out-of-order -&gt; Commit inorder</p>
<h3 id="week-7">Week 7</h3>
<p>Instruction can only be fetched when a branch is resolved.</p>
<p>Why do we need reservation station when we have reorder buffer?</p>
<p>reorder buffer holds output
reservation station buffers input</p>
<p>Tomasulo with Hardware Speculation</p>
<p>Issue -&gt; Execute -&gt; Write Result(ROB) -&gt; Commit</p>
<p>Trace cache</p>
<p>Midterm review: all until superscalars</p>
<p>Macro-op fusion: Fuses simple instruction combinations to reduce instruction count, kind of like Peephole optimization.</p>
<p>Practical limitations to ILP: programs can only have a certain level of concurrency</p>
<h3 id="week-9">Week 9</h3>
<p>Midterm review + Midterm</p>
<h3 id="week-10">Week 10</h3>
<p>Temporal Locality: recent memory access will have higher chances to be accessed again.
Spatial Locality: locations near the cenet memory access will have higher chances to be accessed.</p>
<p>SRAM: cache
DRAM: Memory</p>
<p>Cache Block placement</p>
<ul>
<li>Fully Associative(one set): block can go any where.
<ul>
<li>Have lower miss rate.</li>
<li>Must search the whole cache to find the block.</li>
</ul>
</li>
<li>Direct Mapped: block can only go to location <code>mod blocksize</code>.
<ul>
<li>Simplest approach.</li>
<li>Blocks map to the same location, resulting in higher miss rate.</li>
<li>Only have one replacement policy.</li>
</ul>
</li>
<li>Set Associative: n-way Associative, each set can have at most n blocks.
<ul>
<li>Higher level caches: 2- or 4-way common (faster search).</li>
<li>Lower level caches: 8- to 32-way common.</li>
</ul>
</li>
</ul>
<p>Cache Block Identification: Tag - Index - Block Offset</p>
<ul>
<li>Example: Cache 32 KBytes, 2-way, 64 Bytes per line, Address 32 bits
<ul>
<li>0x000249F0 = (0000 0000 0000 0010 0100 1001 1111 0000)_2</li>
<li>Block offset = log_2 64 = 6 bits</li>
<li>Index = log_2(32K / 64 / 2 (2-way)) = 15 - 6 - 1 = 8 bits</li>
<li>Tag = 32 - 8 - 6 = 18 bits</li>
</ul>
</li>
</ul>
<p>Eviction Methods: which cache block to evict?</p>
<ul>
<li>Random</li>
<li>Least-recently-used(LRU)</li>
<li>Not-recently-used(NRU): any cache block other than most-recently-used.</li>
</ul>
<p>Inclusive cache</p>
<ul>
<li>lower level cache has a copy of every block in higher-level caches.
<ul>
<li>pros: in parallel systems, if lower-level cache is not presented, system doesn&rsquo;t need to search higher level cache.</li>
<li>cons: need to evict each level&rsquo;s cache block if a cache block is evicted.
Exclusive cache</li>
</ul>
</li>
<li>each level has dintict cache blocks.
<ul>
<li>pros: efficient use of space since there is no duplicate cache block.</li>
<li>cons: cache coherence across different processors.</li>
</ul>
</li>
</ul>
<p>Average Memory Access Time(AMAT) = Hit time + Miss rate * Miss penalty = Hit rate * Hit time + Miss rate * Miss time</p>
<ul>
<li>Hit time is always there because whether the block we&rsquo;re trying to access is in the cache, we will need to check the cache.</li>
</ul>
<p>Techniques for reducing hit time</p>
<ul>
<li>Victim Cache: stores blocks that are evicted from L1. (Also reduces Miss rate or Miss penalty)</li>
</ul>
<p>Techniques for reducing miss penalty</p>
<ul>
<li>Early restart: request words in normal orde and send requested word to processor as soon as it arrives, not wait until cache line is filled.</li>
<li>Critical word first: request the exact word from memory and sends requested word to processor as soon as it arrives.</li>
<li>Merging write buffer: CPU only stalls on write when write buffer full. (Write may overtake early write)</li>
</ul>
<p>Cache Miss Types</p>
<ul>
<li>Compulsory(Cold) miss: when a block is accessed for the first time.</li>
<li>Capacity miss: cache was evicted due to capacity.</li>
<li>Conflict miss: cache was evicted due to capacity of set. (Fully associative does not have this miss type)</li>
</ul>
<p>Reducing Cold Miss Rates</p>
<ul>
<li>Large block size</li>
<li>Prefetch: speculate future instr/data accesses and fetch them into cache. Prefetch should not be late or too early.
<ul>
<li>Hardware prefetch: sequential and strided prefetching. Stream buffer(works well for instruction caches) to prevent cache pollution.</li>
<li>Software prefetch: explicit prefetch instructions. Software prefetch with loop unrolling or software pipeline.
<ul>
<li>Restricted to loops with array accesses and it&rsquo;s hard to get right.</li>
</ul>
</li>
</ul>
</li>
<li>High associativity caches</li>
</ul>
<p>Basic Cache Optimization(+ improvement, - worse)</p>
<ul>
<li>Larger block size: + Miss rate, - Miss penalty. Doesn&rsquo;t affect Hit time and power consumption.</li>
<li>Bigger cache: + Miss rate(improves capacity misses), - Hit time, - Power.</li>
<li>High associativity: + Miss rate(improves conflict misses), - Hit time, - Power.</li>
<li>Multilevel caches: + Miss penalty(data might be found in L2 cache).</li>
<li>Give priority to read misses: read misses and there are write misses in the write buffer, read misses are handled first. + Miss penalty.</li>
<li>Avoid virtual to physical address translation lookup: + Hit time.</li>
</ul>
<p>Compiler Optimizations:</p>
<ul>
<li>Instruction reordering: reduce conflict misses</li>
<li>Data reordering: 2 arrays v.s. struct, loop interchange(swap nested loops to access memory in sequential ), loop fusion, blocking(access blocks of data)</li>
</ul>
<h3 id="week-11">Week 11</h3>
<p>Virtual Memory</p>
<ul>
<li>Programs are too large to fit in physical memory. A method to share physical memory for a large amount of processes.</li>
<li>Each process has its own, full, address space.
<ul>
<li>Virtual Memory: pages</li>
<li>Physical Memory: frames</li>
</ul>
</li>
<li>Recently not used pages may be swapped to disk. (Swap disk)</li>
<li>Virtual Memory miss: page fault. Page not in memory, so OS needs to retrieve pages from disk(very slow).</li>
</ul>
<p>Page Table</p>
<ul>
<li>OS maintains a table that maps all virtual pages to physical page frames.</li>
<li>One PT per process(page table register points to the Page table of the current process) and one for the OS.</li>
<li>Memory is fully associative.</li>
<li>OS maintains a list of free frames.</li>
</ul>
<p>Page Table stores info for translating virtual page number to physical page number.</p>
<p>Methods to make Page Tables space-efficient</p>
<ul>
<li>Inverted page table: a hash table that maps physical and virtual pages.</li>
<li>Hierarchical page table: n-level page table. Only the N-th level page table has the value of physical frames.</li>
</ul>
<p>Paging means that every memory access involves 2 memory accesses: 1. get physical address 2. get data from physical address.</p>
<p>What can we do to make paging faster?</p>
<p>Translation Lookaside Buffer</p>
<ul>
<li>A full-associative(Content Addressable Memory, CAM) cache of Page Table entries. Parallel lookup.</li>
<li>Every entry has many bits(Valid, R/W, User/Supervisor, Dirty, Access), a tag, a data(physcial page number).</li>
</ul>
<p>Virtually tagged problems</p>
<ul>
<li>Synonyms(alias problem): different virtual addresses points to the same physical address.
<ul>
<li>Write to copy 1 would not be reflected in copy 2.</li>
</ul>
</li>
<li>Homonyms: same virtual addresses different physical address due to process switching.
<ul>
<li>Possible solution: 1. flush cache on context switch(increase miss rate) 2. add PID to cache tag.</li>
</ul>
</li>
</ul>
<p>Methods to address a cache in a virtual-memory system</p>
<ul>
<li>Physically Indexed, physically tagged: translation first, increasing L1 hit time.</li>
<li>Virtually Indexed, virtually tagged: cannot distinguish synonyms/homonyms in cache.</li>
<li>Virtually Indexed, physically tagged: L1 cache indexed virtual address, tags can be checked after translation.</li>
<li>Physically Indexed, virtually tagged: not practical.</li>
</ul>
<p>Does physically indexed, physically tagged mean TLB and cache have to be accessed sequentially? Not if PageSize &gt; #Sets * BlockSize</p>
<h3 id="week-12">Week 12</h3>
<p>Motivation for multicores</p>
<ul>
<li>Power wall, ILP wall</li>
</ul>
<p>Parallel architecture = computing model + communication model</p>
<ul>
<li>Computing model: organization of cores and how data is processed</li>
<li>Communication model: how cores communication?
<ul>
<li>Shared memory: explicit synchronization(via loads and stores)</li>
<li>Message passing: implicit synchronization(via messages)</li>
</ul>
</li>
</ul>
<p>Multicore processors</p>
<ul>
<li>Uniform memory access (UMA): physically centralized memory -&gt; Symmetric Multiprocessor(SMP)</li>
<li>Non-Uniform memory access (NUMA): physically distributed memory -&gt; Distributed Shared-Memory</li>
</ul>
<p>Communication Model</p>
<ul>
<li>Threads communication is done through shared memory variables</li>
<li>Explicit data synchronization, done by the developers</li>
</ul>
<p>The main goal for Cache Coherence is to make caches invisible.</p>
<p>Single Write Multiple Reader</p>
<ul>
<li>Write Propagation: writes are eventually visible in all processors.</li>
<li>Write Serialization: writes are in the same order in all processors.</li>
</ul>
<p>Cache Coherence Protocol: keep track of what processors have copies of what data.</p>
<ul>
<li>Invalidate protocols: get rid of data with old values, usually used with write-back caches.
<ul>
<li>+: multiple writes to the cache block only require one invalidation.</li>
<li>+: less bandwidth since it doesn&rsquo;t need to send new value of the data.</li>
<li>-: write-back data to memory when evicting a modified block.</li>
</ul>
</li>
<li>Update protocols: update every caches&rsquo; copy of data, usually used with write-through caches.
<ul>
<li>+: new value can be re-used without the need to ask for it again.</li>
<li>+: data can always be read from memory.</li>
<li>-: possible multiple useless updates.</li>
</ul>
</li>
</ul>
<p>How can cache coherence protocols be implemented?</p>
<ul>
<li>Software coherence: programmer or compiler-controlled</li>
<li>Hardware coherence: add state bits to cache lines to track state of the line.
<ul>
<li>Exclusive state: block is cached only in this cache, has not been modified, but can be modified without permission. Freely modify and upgrade modified state.</li>
</ul>
</li>
</ul>
<h3 id="week-13">Week 13</h3>
<p>Cache Coherence Protocol Implementations</p>
<ul>
<li>Snooping: all cache controllers monitor all other caches&rsquo; activites and maintain the state of their lines.
<ul>
<li>Information is shared in a common bus. Bus does not scale well.</li>
<li>Each cache has a bus-side controller that monitors all transactions.</li>
<li>Two types of snooping: 1. write invalidation 2. write update</li>
</ul>
</li>
<li>Directory: a central control device directly handles all cache activies.
<ul>
<li>Directory acts as a serialization to provide ordering.</li>
</ul>
</li>
</ul>
<p>MSI Protocol</p>
<ul>
<li>Invalid: block is not present. Need to fetch it from memory or other cache.</li>
<li>Shared: in &gt; 1 caches.</li>
<li>Modified: in 1 cache. Processor can read/write directly.</li>
</ul>
<p>MESI Protocol has one more Exclusive state.</p>
<p>Coherence misses: when a block is not in the cache because it was invalidated by a write from another processor.</p>
<ul>
<li>Hard to reduce due to communication and sharing of data in parallel application.</li>
<li>False sharing: processor modify different words of the cache block but end up invalidating the complete block.
<ul>
<li>False sharing coherence misses increase with larger cache line size.</li>
</ul>
</li>
</ul>
<p>Problems for snooping on a common shared bus</p>
<ul>
<li>When should memory provide data?</li>
<li>What if we need to Write-back?</li>
<li>Conflict when processor and bus-side controller check the cache</li>
<li>State transitions may require several steps</li>
<li>What to do if there are conflicting requests(race conditions) on the bus?
<ul>
<li>Transient states</li>
</ul>
</li>
</ul>
<p>Problems for snooping with multi-level hierarchies</p>
<ul>
<li>Processor interacts with L1 while bus-side controller interacts with L2.
<ul>
<li>Inclusive cache and M state caches in L1 must also be in L2</li>
<li>Propagate all transactions to L1</li>
</ul>
</li>
</ul>
<h3 id="week-14">Week 14</h3>
<p>Snooping implementation has bottleneck at the common data bus. Thus we introduce snooping with split-transaction buses.</p>
<ul>
<li>Create buffer for each cache to hold pending transactions.</li>
<li>Send <code>negative acknowledgement (NACK)</code> when buffers are full.</li>
<li>Snooping with Ring can enforce write serialization with home node. If there are multiple racing writes, ties are broken via the home node.</li>
</ul>
<p>Directory contains a line state and sharing bit-vector.</p>
<ul>
<li>Line state: invalid(00), shared(01), modified(10)</li>
<li>Sharing vector: not cached(00), shared(01)</li>
</ul>
<p>Directory operation</p>
<ul>
<li>It is necessary to collect all acknowledgements(ACK) with write that has multiple sharers.</li>
<li>Complex state changes, directory must also receive ACK.</li>
</ul>
<p>Implementation difficulties for direcotry operation</p>
<ul>
<li>Operations have to be serialized locally.</li>
<li>Operations have to be serialized at directory.</li>
</ul>
<p>Directory Overhead grows with number of cores.</p>
<ul>
<li>Baseline overhead: (number of cores + 1 dirty bit / cache block size * 8 bits)</li>
<li>Cached Directories</li>
<li>Limited Pointer Directories</li>
</ul>
<p>Distributed Directories</p>
<ul>
<li>Local, Home, Remote nodes.</li>
</ul>
<p>Memory Consistency is a specification, which specifies the order of loads and stores.</p>
<ul>
<li>Memory Consistency model is governed by 1. Core pipeline(memory reorder) 2. Coherence Protocol</li>
</ul>
<p>Sequential Consistency(SC): 1. Result should be the same in a time-shared multiprocessor 2. Relative order should be maintained in one thread</p>
<ul>
<li>Sequential Consistency is what should load really happens.
<ol>
<li>Threads issue memory operations in program order</li>
<li>Before issuing next memory operation threads wait until last issued memory operation completes (i.e., performs w.r.t. all other processors)</li>
<li>A read is allowed to complete only if the matching write (i.e., the one whose value is returned to the read) also completes</li>
</ol>
</li>
</ul>
<p>Issue: memory operation leaves the processor and becomes visible to the memory subsystem.
Performed: memory operation appears to have taken place.</p>
<ul>
<li>Performed with reference to processor X: performed to processor X.</li>
<li>Globally performed or complete: performed to all processors.</li>
</ul>
<p>Merging write buffer executes memory operations in the following sequence:</p>
<ul>
<li>write foo(200)</li>
<li>write A(400)</li>
<li>write flag(204)</li>
<li>write bar(404)</li>
</ul>
<p>foo and flag will be written to memory before A and bar.</p>
<p>Write-serialization: per variable. Write to same location by different processors are seen in same order by all processors.
Write-atomicity: across threads</p>
<p>In-window Speculation:</p>
<ul>
<li>Speculation: read from cache before commiting. If no change, then commit; If there&rsquo;s a change, then squash and replay.</li>
<li>Write-prefetcing: obtain read-exclusive out-of-order or in parallel. However, the write should be in program.</li>
</ul>
<h3 id="week-15">Week 15</h3>
<p>Relaxed Memory Consistency Models:</p>
<ul>
<li>Total Store Ordering (TSO): relaxes W -&gt; R. Not guarantee because there could be a store buffer.</li>
<li>Partial Store Ordering (PSO): relaxes W -&gt; R and W -&gt; W.</li>
<li>Relaxes Memory Ordering (RMO): relaxes all four memory orders.</li>
<li>Release Consistency (RC): relaxes all four memory orders but provides release store and acquire load.
<ul>
<li>Reads and writes are allowed to bypass both reads and writes.</li>
<li>Previous reads and writes must complete before release completes.</li>
<li>No reads and writes can complete before acquire completes.</li>
</ul>
</li>
<li>IBM Power: relaxes all four memory orders and write atomicity. Provides 2 types of barriers.</li>
</ul>
<p>Every relaxed consistency model ensures single thread dependencies.</p>
<p>Release Consistency:</p>
<ul>
<li>Writer-initiated invalidation</li>
<li>Without Writer-initiated invalidation</li>
</ul>
<p>Out-of-thin-air problem</p>
<p>Progress Axiom: a store should be eventually visible for all processors.</p>
<p>Synchronization is necessary to ensure that operations in a parallel program happen in the correct order.</p>
<ul>
<li>Conditional Variable: signal</li>
<li>Mutual exclusion</li>
</ul>
<p>Without memory consistency model, we cannot implement different types of synchronization.</p>
<p>Can Sequential Consistency implement mutually exclusion?</p>
<ul>
<li>Yes. Peterson algorithm, but it is not practical for multiple processors.</li>
<li>For Relaxes models need to use fences.</li>
</ul>
<p>Building blocks for synchronization. Special instructions(RMW atomic) of the hardware to implement locks.</p>
<ul>
<li>Test &amp; set: reads a memory location and sets it to value 1.</li>
<li>Compare &amp; swap: it is used more frequently. Check the value and swap if the value is equal.</li>
<li>Fetch &amp; add: fetch value from memory location and atomically increment it.</li>
<li>Load Link(or Load Locked)/Store Conditional(LL/SC): don&rsquo;t need to retain exclusive state.</li>
</ul>
<h3 id="week-16">Week 16</h3>
<p>Implementation of Read Modified Write(RMW) instructions:</p>
<ul>
<li>Lock the bus: disallows other threads</li>
<li>Cache line blocking: to obtain read-exclusive state, invalidates other processors&rsquo; cache. Once a processor gains exclusive state,
other processors will receive NACK from the processor that has exclusive access.</li>
</ul>
<p>Exclusive Access</p>
<ul>
<li>Directory retries when receives NACK</li>
<li>With Snooping, processors retires when receives NACK</li>
</ul>
<p>RMW acts like a memory fence(flush write buffer before RMW).</p>
<p>Techniques for reducing test and set traffic:</p>
<ul>
<li>Test and test-&amp;-set relies on cache coherece. It grabs a lock one time.</li>
<li>Test and set with exponential back-off, retry test and set after pause.</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Fall 2024: CS 6520 Programming Languages</title>
      <link>https://leewei.co/cs6520/</link>
      <pubDate>Thu, 05 Dec 2024 20:47:48 -0600</pubDate><author>lee10202013@gmail.com (Lee Wei)</author>
      <guid>https://leewei.co/cs6520/</guid>
      <description>Week 1 Overview of this course. Shplait programming language basic overview.
Development template
Types: data representation Tests: write function signature and tests Template: write the layout of the function body Body: finish function body case-by-case Homework: Familiar with Shplait.
Week 2 Introduction of Shplait lists.
Homework: Natural recursion implementation with template.
Week 3 Binding and environment
Binding: bind an expression to an variable. Environment: store the bindings. Homework: Write a interpreter for Moe programming language using Shplait.</description>
      <content:encoded><![CDATA[<h3 id="week-1">Week 1</h3>
<p>Overview of this course. <strong>Shplait</strong> programming language basic overview.</p>
<p>Development template</p>
<ol>
<li>Types: data representation</li>
<li>Tests: write function signature and tests</li>
<li>Template: write the layout of the function body</li>
<li>Body: finish function body case-by-case</li>
</ol>
<p>Homework: Familiar with <strong>Shplait</strong>.</p>
<h3 id="week-2">Week 2</h3>
<p>Introduction of <strong>Shplait</strong> lists.</p>
<p>Homework: Natural recursion implementation with template.</p>
<h3 id="week-3">Week 3</h3>
<p>Binding and environment</p>
<ul>
<li>Binding: bind an expression to an variable.</li>
<li>Environment: store the bindings.</li>
</ul>
<p>Homework: Write a interpreter for <strong>Moe</strong> programming language using <strong>Shplait</strong>.</p>
<ul>
<li>Parse: parse <strong>Moe</strong> to <strong>Shplait</strong> data representation (expression).</li>
<li>Subst: substitude identifiers with expressions.</li>
<li>Interp: interpret expressions to integer.</li>
</ul>
<h3 id="week-4">Week 4</h3>
<p>Lambda: function as values. We can also bind anonymous function to variable.
Mutable states and stores.</p>
<ul>
<li>Box: store location of the value.</li>
<li>Unbox: get the value of a given location.</li>
<li>Setbox: update the value of a given location.</li>
</ul>
<p>Homework: Implement <strong>Moe</strong> conditions and boolean. Also, implement thunks and force.</p>
<ul>
<li>Thunk: delay a computation, until it is called by force.</li>
<li>Force: evaluate a thunk expression.</li>
</ul>
<h3 id="week-5">Week 5</h3>
<p>Record: similar to <strong>C</strong>&rsquo;s struct. A record can have a list of fields and values.
Variable: mutable variable.
Fluid let: syntax sugar. Instead of changing the interpreter, we can change the parser to genereate a let form that is matching fluid let.</p>
<p>Homework: Implement <strong>Moe</strong> begin and record initialization, access and mutation.</p>
<ul>
<li>Record: implement with <strong>Moe</strong>&rsquo;s box expression.</li>
</ul>
<h3 id="week-6">Week 6</h3>
<p>Syntax sugar and encoding
Currying: a function takes an argument that returns another function takes another argument.
Midterm: The concept of box is important! Think of box as a pointer, then everything is clear.</p>






<pre tabindex="0"><code>#true = fun(x) : fun(y) : x
#false = fun(x) : fun(y) : y</code></pre>
<h3 id="week-7">Week 7</h3>
<p><code>letrec</code>, <code>mk_rec</code> for encoding recursion. However, the problem with <code>mk_rec</code> is that we assuem the right hand side as a procedure.
Use <code>fun (): ...</code> as a delay for implementing recursion.
<code>Optionof</code> has two variants: <code>none</code> and <code>some</code>.</p>
<p>Homework: Implement syntax sugar for recursive bindings, recursive function and two arguments function.</p>
<h3 id="week-9">Week 9</h3>
<p>Lazy evaluation
Continuation</p>
<h3 id="week-10">Week 10</h3>
<p>Trace continuation
Garbage Collection
Compiler</p>
<p>Homework: Implement <code>neg</code>, <code>avg</code> and support zero or multiple arguments for function call with continuation.</p>
<h3 id="week-11">Week 11</h3>
<p>Compiler
Midterm</p>
<p>Homework: Implement a compiler that translate Moe with garbage collection.</p>
<h3 id="week-12">Week 12</h3>
<p>Class
Inheritance</p>
<p>Homework: Implement instantiation, instanceof, select.</p>
<h3 id="week-13">Week 13</h3>
<p>Type checker checks types of the program before interpreting it.</p>
<p>Homework: Typechecker.</p>
<h3 id="week-14">Week 14</h3>
<p>Type checker with unify.</p>
<p>Homework: Typecheck if0 and list.</p>
<h3 id="week-15">Week 15</h3>
<p>Polymorphism</p>
<p>Homework: Parameterized over types and functions.</p>
<h3 id="week-16">Week 16</h3>
<p>Macro
Programming Language research</p>
<p>Homework: final project</p>
]]></content:encoded>
    </item>
    <item>
      <title>Fall 2024: CS 6475 Advanced Compilers</title>
      <link>https://leewei.co/cs6475/</link>
      <pubDate>Thu, 05 Dec 2024 20:03:46 -0600</pubDate><author>lee10202013@gmail.com (Lee Wei)</author>
      <guid>https://leewei.co/cs6475/</guid>
      <description>Week 1 Overview of this course.
Readings:
The death of optimizing compilers On Proebstingâs Law Impact of Economics on Compiler Optimization Why Do Peephole Optimizations Work? (option) Compiler Optimization Catalog Assignment:
Find a missing optimization in LLVM using this. Prove it with Alive2. Week 2 Discussions:
Is it really the dealth of optimizing compilers? No. On Proebsting&amp;rsquo;s Law. Probably cannot use -O0 as a 18 years old compiler. Impact of Economics on Compiler Optimization.</description>
      <content:encoded><![CDATA[<h3 id="week-1">Week 1</h3>
<p>Overview of this course.</p>
<p>Readings:</p>
<ul>
<li><a href="https://cr.yp.to/talks/2015.04.16/slides-djb-20150416-a4.pdf">The death of optimizing compilers</a></li>
<li><a href="https://gwern.net/doc/cs/algorithm/2001-scott.pdf">On Proebstingâs Law</a></li>
<li><a href="https://dl.acm.org/doi/pdf/10.1145/376656.376751">Impact of Economics on Compiler Optimization</a></li>
<li><a href="https://blog.regehr.org/archives/2485">Why Do Peephole Optimizations Work?</a></li>
<li><a href="https://www.clear.rice.edu/comp512/Lectures/Papers/1971-allen-catalog.pdf">(option) Compiler Optimization Catalog</a></li>
</ul>
<p>Assignment:</p>
<ul>
<li>Find a missing optimization in LLVM using <a href="https://gcc.godbolt.org/">this</a>.</li>
<li>Prove it with <a href="https://alive2.llvm.org/ce/">Alive2</a>.</li>
</ul>
<h3 id="week-2">Week 2</h3>
<p>Discussions:</p>
<ul>
<li>Is it really the dealth of optimizing compilers? No.</li>
<li>On Proebsting&rsquo;s Law. Probably cannot use <code>-O0</code> as a 18 years old compiler.</li>
<li>Impact of Economics on Compiler Optimization. Look for where the money goes.</li>
<li>Refinement is very important!</li>
</ul>
<p>Assignment:</p>
<ul>
<li>Pick a missing optimization in LLVM to implement.</li>
<li>Build LLVM and Alive2 locally.</li>
</ul>
<h3 id="week-3">Week 3</h3>
<p>Discussions:</p>
<ul>
<li>How LLVM is tested?
<ul>
<li>unittest: LLVM API tests</li>
<li>tests: regression tests</li>
<li>llvm-test-suite: benchmark tests</li>
<li>libFuzzer</li>
<li>test by users</li>
</ul>
</li>
<li>AVX512 ternary logic. It&rsquo;s difficult to decode due to its required bit space.</li>
<li>Superoptimization: To generate optimized code, superoptimizer searches for certain pattern, does refinement check and assess with its cost model.</li>
</ul>
<p>Readings:</p>
<ul>
<li><a href="https://www.cs.princeton.edu/~appel/papers/ssafun.pdf">SSA is Functional Programming</a></li>
<li><a href="https://www.cs.cmu.edu/~rjsimmon/15411-f15/lec/10-ssa.pdf">Lecture Notes on Static Single Assignment Form</a></li>
<li><a href="https://lowlevelbits.org/system-under-test-llvm/">System Under Test: LLVM</a></li>
<li><a href="https://blog.regehr.org/archives/1450">Testing LLVM</a></li>
</ul>
<p>Assignment:</p>
<ul>
<li>Implement a missing optimization in LLVM and add tests to it. <a href="https://github.com/regehr/llvm-project/pull/60">Github PR</a></li>
</ul>
<h3 id="week-4">Week 4</h3>
<p>Discussions:</p>
<ul>
<li>Compiler without SSA gets harder to get in right, and it messes up the code base.</li>
<li>Brainfuck language
<ul>
<li>Game of Life in BF</li>
</ul>
</li>
<li>Speedup interpreter with <a href="https://eli.thegreenplace.net/2012/07/12/computed-goto-for-efficient-dispatch-tables">computed goto</a>.</li>
<li>Need to be cautious when using <code>APInt</code>. There are use cases in LLVM that use 80, 320 bits.</li>
<li>Intro for <a href="https://en.wikipedia.org/wiki/Partial_evaluation">Partial Evaluation</a> and its relation to staged computation.
<ul>
<li>Abstract interpreter, approximate computations, Halting problem, Tainted cell.</li>
</ul>
</li>
<li>General optimization approach for BF.
<ul>
<li>Creating virtual instructions for BF is similar with x86-64 processors having virtual instructions that are not exposed to developers.</li>
</ul>
</li>
<li>It&rsquo;s hard to pass alias information to compilers, like using <code>restrict</code> correctly in C.</li>
</ul>
<p>Readings:</p>
<ul>
<li><a href="https://c9x.me/compile/bib/braun13cc.pdf">Simple and Efficient Construction of Static Single Assignment Form</a>: Great paper that solves real problems!</li>
<li><a href="https://arxiv.org/pdf/2305.13241">Whose baseline is it anyway?</a></li>
<li><a href="https://www.npopov.com/2023/10/22/How-to-reduce-LLVM-crashes.html">llvm-reduce</a></li>
</ul>
<p>Assignment:</p>
<ul>
<li>Implement a <a href="https://github.com/leewei05/bf">BF interpreter</a>.</li>
</ul>
<h3 id="week-5">Week 5</h3>
<p>Discussions:</p>
<ul>
<li>Always optimize with a profiler (data). Recursive to a close form.</li>
<li>C++ downcast optimization probably couldn&rsquo;t catch by the profiler.</li>
<li>ABI doc tells developer how procedures communicate. Which register to store argument.</li>
<li>If a compiler doesn&rsquo;t know a fact, sometimes we can rewrite code to teach compiler to optimize.</li>
<li>How does compiler recognize certain pattern, such as popcount, to optimize? Hardcode and do some canonicalization before finding certain patterns.</li>
<li>Approximate: tracking info accurately is hard. Instead, tools try to shrink the area of approximation.</li>
</ul>
<p>Readings:</p>
<ul>
<li><a href="https://cs.au.dk/~amoeller/spa/spa.pdf">Static Program Analysis: Ch 1</a></li>
<li><a href="https://www.agner.org/optimize/">Agner Fog</a></li>
<li><a href="https://www.corsix.org/content/whirlwind-tour-aarch64-vector-instructions">ARM SIMD</a></li>
</ul>
<p>Assignment:</p>
<ul>
<li>Implement a profiler on top of the <a href="https://github.com/leewei05/bf">BF interpreter</a>.
<ul>
<li>Simple loops: no i/o, no pointer changes, either +1, -1</li>
</ul>
</li>
<li>Implement a <a href="(https://github.com/leewei05/bf)">compiler</a> for BF that emits x86-64 assembly.</li>
</ul>
<h3 id="week-6">Week 6</h3>
<p>Discussions:</p>
<ul>
<li>Is it okay to remove infinite loop?</li>
<li>Debugging: Optimization fuel decrement one until fuel run out, binary search the commit.</li>
<li>Scan memory tricks</li>
<li>Fast program tries to handle aligned memory.</li>
<li>Lattice and semilattice are abstract values that live in the compiler.
<ul>
<li>Design goal tight enough to not run forever. In other words, having enough information for the compiler to run fast.</li>
</ul>
</li>
<li>Dataflow Analysis
<ul>
<li>Top is universal set(imprecise info). Start from the top, we will reach a point that has enough information.</li>
<li>Bottom is empty set(precise info). Start from the bottom, we will reach a fixed point.</li>
<li>Least fixed point is the point we get the most information.</li>
</ul>
</li>
</ul>
<p>Examples:</p>
<p>Dead Code Elimination(Lattice with a height of 2):</p>
<ul>
<li>Top is maybe reachable.</li>
<li>Bottom is provably unreachable.</li>
</ul>
<p>Constant Propagation(Lattice with a height of 3):</p>
<ul>
<li>Top is probably not constant.</li>
<li>Integers</li>
<li>Bottom is unreachable.</li>
</ul>
<p>Readings:</p>
<ul>
<li><a href="https://cs.au.dk/~amoeller/spa/spa.pdf">Static Program Analysis: Ch 4</a></li>
<li><a href="https://docs.oracle.com/javase/specs/jls/se23/html/jls-17.html#jls-17.4.9">Infinite Loop in Java</a></li>
<li><a href="https://www.open-std.org/jtc1/sc22/wg14/www/docs/n1528.htm">Undefined Bahvior for infinite loops</a></li>
</ul>
<p>Assignment:</p>
<ul>
<li>Optimize simple and non-simple loops in BF, fast vector implementation.
<ul>
<li>Starts with simple cases: make a tape with bunch of 1s with a 0 in it, and print the pointer of the 0.</li>
<li>Write a tiny BF program</li>
</ul>
</li>
</ul>
<h3 id="week-7">Week 7</h3>
<p>Discussions:</p>
<ul>
<li>GCC IR gimple</li>
<li>LLVM IR flat</li>
<li>In practice, we use worklist algorithm a lot. Which node inside a worklist to choose first? A node that is SCC since it can affect other nodes.</li>
<li>Transfer function table SPA</li>
<li>How can we run better benchmarks?</li>
<li>Setting up the conditions for the compilers to know more details.</li>
<li>Be a better programmer by moving redundant and loop invariant operations outside of loop.</li>
<li>Math is good for low-level programming.</li>
</ul>
<p>References for writing x86-64 vector instructions:</p>
<ul>
<li><a href="https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#ig_expand=5738,440,778,5762,5872,4606,5744,5762,5872,4606">Intel Official Intrinsic manual</a></li>
<li><a href="https://stackoverflow.com/questions/40032906/is-there-an-efficient-way-to-get-the-first-non-zero-element-in-an-simd-register">Peter Cordes on Stackoverflow</a></li>
<li><a href="https://www.felixcloutier.com/x86/">Felix Cloutier&rsquo;s x86-64 manual</a></li>
<li><a href="https://gcc.godbolt.org/z/vqd9K4rqT">One of my working examples</a></li>
</ul>
<p>Readings:</p>
<ul>
<li><a href="https://gcc.gnu.org/onlinedocs/gccint/GIMPLE.html">GIMPLE</a></li>
<li><a href="https://www.cse.wustl.edu/~jain/iucee/index.html">Computer Systems Performance Analysis</a></li>
<li><a href="https://emeryberger.com/research/stabilizer/">Sabilizer</a></li>
</ul>
<p>Videos:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=vrkR7jKcFpw">Alive2 like tool for GCC</a></li>
</ul>
<h3 id="week-9">Week 9</h3>
<p>Discussions:</p>
<ul>
<li>JIT compiler, how to encode instructions to JIT.</li>
<li>Partial evaluation</li>
<li>Dead store elimination</li>
<li>calloc</li>
<li>global, stack, heap(sticking point, people uninitialized on purpose)</li>
<li>Common subexpression elimination -&gt; Available</li>
<li>Rematerialzation</li>
<li>Very busy -&gt; LICM</li>
<li>Autotuning try a lot of things, PGO run a once and tell the compiler some information next the build.</li>
</ul>
<h3 id="week-11">Week 11</h3>
<p>Discussions:</p>
<ul>
<li>Linker script: tells the linker where memory section maps on a dev board.</li>
<li>Demanded Bits: you cannot prove that bits are not necessary.</li>
<li>LLVM Known bits.</li>
<li>Trace based JIT</li>
<li>Precompiled headers</li>
<li>Timeout is a real problem, AWS IAM Z3 solver.</li>
<li>Flaky tests: sometimes fail and success.</li>
<li>LLVM IR verifier</li>
</ul>
<p>Readings:</p>
<ul>
<li><a href="https://www.amazon.com/Move-Semantics-Complete-Guide-First/dp/3967309002/">C++ Move</a></li>
<li><a href="https://github.com/llvm/llvm-project/blob/main/llvm/include/llvm/Support/KnownBits.h">LLVM KnownBits</a></li>
</ul>
<h3 id="week-12">Week 12</h3>
<p>Discussions:</p>
<ul>
<li>Bugpoint was used in LLVM for reducing tests. It defaults use some instructions result in Undefined Behavior.</li>
<li>Trusting trust attacks.</li>
<li>Diverse Double compiling</li>
</ul>
<p>Readings:</p>
<ul>
<li><a href="https://users.cs.utah.edu/~regehr/papers/undef-pldi17.pdf">Taming Undefined Behavior in LLVM</a></li>
<li><a href="https://dwheeler.com/trusting-trust/">Diverse Double compiling</a></li>
<li><a href="https://en.wikipedia.org/wiki/Reproducible_builds">Reproducible builds</a></li>
<li><a href="https://www.cs.cmu.edu/~rdriley/487/papers/Thompson_1984_ReflectionsonTrustingTrust.pdf">Trusting trust</a></li>
</ul>
<h3 id="week-13">Week 13</h3>
<p>Discussions:</p>
<ul>
<li>Undefined Behavior is also in the hardware chips.</li>
<li>Register pair for multiplication.</li>
<li><code>undef</code> breaks SSA.</li>
<li>Trusting trust really worths reading it!</li>
<li>Java type concurrency</li>
<li>Type system is trying to help you not break the program.</li>
<li>Union find</li>
<li>HCI for expressing types</li>
<li>bitblit</li>
</ul>
<p>How to implement fast inverse square root on GCC and Clang:</p>
<ul>
<li>union</li>
<li>memcpy fast</li>
<li>char *</li>
<li>(C++)reinterpret cast</li>
</ul>
<p>Readings:</p>
<ul>
<li><a href="http://lucacardelli.name/papers/typesystems.pdf">Type Systems</a></li>
<li><a href="http://mazsola.iit.uni-miskolc.hu/~drdani/docs_arm/36_Elsevier-ARM_Sy.pdf">ARM System</a></li>
<li><a href="https://arxiv.org/pdf/2305.13241">Whose Baseline is it anyway?</a></li>
<li><a href="https://devblogs.microsoft.com/oldnewthing/20180209-00/?p=97995">BitBlip</a></li>
<li><a href="https://pdos.csail.mit.edu/~rsc/pike84bitblt.pdf">BitMap</a></li>
</ul>
<h3 id="week-14">Week 14</h3>
<p>Discussions:</p>
<ul>
<li>SMT solvers: provide them constraints to solve. If there are solutions, it will return one solution(model).
<ul>
<li>Practice: z3 sudoku solver(Int, BitVector).</li>
</ul>
</li>
<li>Use a solver for unbounded Loop is hard because we cannot unroll it.</li>
<li>People compile language to Javascript -&gt; asm.js -&gt; WebAssembly(Stack machine)</li>
<li>Baseline compiler</li>
<li>Everyone needs to know at least one language in System Programming, Scripting, Parallel Programming, Math.</li>
<li>Autovectorization for large legacy can improve significant performance.</li>
</ul>
<p>Readings:</p>
<ul>
<li><a href="https://webkit.org/blog/3362/introducing-the-webkit-ftl-jit/">Webkit JIT</a></li>
<li><a href="https://ericpony.github.io/z3py-tutorial/guide-examples.htm">Z3 Python tutorial</a></li>
<li><a href="https://www.sciencedirect.com/science/article/pii/S1877050912003304">CUDA: Compiling and optimizing for a GPU platform</a></li>
</ul>
<h3 id="week-15">Week 15</h3>
<p>Discussions:</p>
<ul>
<li>GPU compilers</li>
<li>What CPU compilers optimizations don&rsquo;t work on GPU compilers? (GPU has limited registers for each thread)
<ul>
<li>Inline</li>
<li>Loop unrolling</li>
<li>LICM</li>
<li>InstCombine</li>
</ul>
</li>
<li>Divergence problem is critical. Divergence &gt; Latency</li>
<li>Rematerialization</li>
</ul>
<p>Readings:</p>
<ul>
<li><a href="https://dl.acm.org/doi/epdf/10.1145/3528416.3530249">Compilation On The GPU? A Feasibility Study</a></li>
</ul>
<h3 id="week-16">Week 16</h3>
<p>Discussions:</p>
<ul>
<li>Compilation on the GPU</li>
<li>Go&rsquo;s generic rules compares with LLVM&rsquo;s large C++ code base.</li>
<li>Go&rsquo;s generic rules should be checked by something like Z3.</li>
<li>e-graph is good but it is probably not practical to adopt to existing compilers like LLVM or GCC. Applying rewrites might blow up memory usage.</li>
<li>Quine is fun.</li>
</ul>
<p>Readings:</p>
<ul>
<li><a href="https://go.dev/src/cmd/compile/internal/ssa/_gen/generic.rules">Go generic rules</a></li>
<li><a href="https://dl.acm.org/doi/epdf/10.1145/3434304">egg: Fast and Extensible Equality Saturation</a></li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>
