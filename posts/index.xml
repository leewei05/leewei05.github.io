<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Sir</title>
		<link>https://www.leewei.co/posts/</link>
		<description>Recent content in Posts on Sir</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 13 May 2020 22:26:52 +0800</lastBuildDate>
		<atom:link href="https://www.leewei.co/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>CMU Databases Systems: 04 Database Storage(pt.2)</title>
			<link>https://www.leewei.co/posts/cmu-15-445/database-storage-02/</link>
			<pubDate>Wed, 13 May 2020 22:26:52 +0800</pubDate>
			
			<guid>https://www.leewei.co/posts/cmu-15-445/database-storage-02/</guid>
			<description>Andy(lecturer) said that in the early 2000s, Google is making tons of money. And one of the reason Google is expanding and scaling so fast is because they are using HBase, which is called &amp;ldquo;BigTable&amp;rdquo; on GCP. Google is absolutely good at large scale database systems, like Spanner, BigQuery etc. A lot of companies are trying to copy the tech stack of Google. Nevertheless, not all the companies that uses Google Cloud Platform are enterprise level companies, most of them don&#39;t have the resource like Google to develop applications using large scale databases.</description>
			<content type="html"><![CDATA[<p>Andy(lecturer) said that in the early 2000s, Google is making tons of money.
And one of the reason Google is expanding and scaling so fast is because they are using HBase, which is called &ldquo;BigTable&rdquo; on GCP.
Google is absolutely good at large scale database systems, like Spanner, BigQuery etc.
A lot of companies are trying to copy the tech stack of Google.
Nevertheless, not all the companies that uses Google Cloud Platform are enterprise level companies, most of them don't have the resource like Google to develop applications using large scale databases.</p>
<p>A stable RDBMS service is good enough for most of the users.
For instance, Cloud SQL is a managed RDBMS service for MySQL, PostgreSQL, SQL server on GCP.
Cloud SQL lacks tons of native support and the real pain using it is the <code>maintanence window</code>.
GCP forces users to enable automatically update in a period of time because of security reasons.
However, a lot of GCP users complained about this.
Because during the maintanence window, there will be downtime to the database.
Maybe GCP can release a feature that let the users choose whether they want to update their databases. üòú</p>
<p>In addition, there are complaints about the failover process of Cloud SQL.
Some said that the failover didn't work when one of their Cloud SQL master failed. üòÖ</p>
<p>There are still many improvements that GCP can do with Cloud SQL.
Including the support for MariaDB and Oracle, stable service and easier database migration tools.</p>
<p>Just some advices, still a fan for GCP. üòÇ</p>
<h2 id="data-representation">Data Representation</h2>
<p>Tuple storage: a tuple is a sequence of bytes.
DBMS interpret those bytes into types and values.</p>
<ul>
<li>Variable Precision Numbers
<ul>
<li>Inexact, specified by IEEE-754</li>
<li>Faster to compute</li>
<li>Examples: FLOAT, REAL</li>
</ul>
</li>
<li>Fixed Point Precision Numbers(Fixed Point Decimal)</li>
<li>Large Values
<ul>
<li>Most DBMS don't allow tuples to exceed the size of a single page</li>
<li>Postgres: <a href="https://wiki.postgresql.org/wiki/TOAST">TOAST</a></li>
</ul>
</li>
<li>External Value Storage
<ul>
<li>Some DBMS allows users to store very large data in an external file(BLOB type)</li>
<li>These external files are read-only</li>
</ul>
</li>
</ul>
<pre><code>Tuple
| Header | a | b | c(external file pointer) |
</code></pre><h3 id="system-catalogs">System Catalogs</h3>
<p>A DBMS stores meta-data about databases in its internal catalogs.
Stuff like what tables, columns and data type that stored in the database.</p>
<p>We can access to database's catalogs through INFORMATION_SCHEMA api.</p>
<h2 id="workloads">Workloads</h2>
<h3 id="on-line-transaction-processingoltp">On-line Transaction Processing(OLTP)</h3>
<ul>
<li>Fast, short running operations on small number of tuples</li>
<li>Usually the kind of application that people build first</li>
<li>Example: User invocations of Amazon. They can add things to their cart, they can make purchases,
but the actions only affect their account.</li>
</ul>
<h3 id="on-line-analytics-processingolap">On-line Analytics Processing(OLAP)</h3>
<ul>
<li>Long running, more complex queries</li>
<li>Reads large portions of the database</li>
<li>Deriving new data from data collected on the OLTP side</li>
<li>Example: Compute the five most bought items over a one month period for these geographical locations.</li>
</ul>
<h3 id="hybrid-transactionalanalytical-processinghtaphttpsenwikipediaorgwikihybrid-transactionalanalytical-processing"><a href="https://en.wikipedia.org/wiki/Hybrid_transactional/analytical_processing">Hybrid Transactional/Analytical Processing(HTAP)</a></h3>
<p>Traditional application architectures separated transactional and analytical systems.
However, business moments are <code>transient</code> opportunities that must be exploited in real time.
HTAP allows advanced analytics to be run in real time on &ldquo;in flight&rdquo; transaction data, providing an architecture that empowers users to respond more effectively to business moments.</p>
<h2 id="storage-models">Storage Models</h2>
<p>Different ways to store tuples in pages.</p>
<h3 id="n-ary-storage-modelnsm">N-ary Storage Model(NSM)</h3>
<p>The DBMS stores all of the attributes for a single tuple contiguously, also known as &ldquo;row storage&rdquo;.</p>
<ul>
<li>Advantages
<ul>
<li>Fast inserts, updates, and deletes.</li>
<li>Good for queries that need the entire tuple.</li>
</ul>
</li>
<li>Disadvantages
<ul>
<li>Not good for scanning large portions of the table and/or a subset of the attributes. This is because the database will fetch data that is not needed for processing the query.</li>
</ul>
</li>
</ul>
<p>There is an example below, explaining why NSM is not suitable for OLAP. We are trying to know the users amount that modify WIKI from hostname &lsquo;.gov&rsquo; in each month.</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">Table</span> <span class="k">SCHEMA</span> <span class="k">in</span> <span class="n">useracct</span>
<span class="n">userID</span>
<span class="n">userName</span>
<span class="n">userPass</span>
<span class="n">hostName</span>
<span class="n">lastlogin</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">SELECT</span> 
  <span class="k">COUNT</span><span class="p">(</span><span class="n">U</span><span class="p">.</span><span class="n">lastlogin</span><span class="p">)</span>
  <span class="k">EXTRACT</span><span class="p">(</span><span class="k">month</span> <span class="k">FROM</span> <span class="n">U</span><span class="p">.</span><span class="n">lastlogin</span><span class="p">)</span> <span class="k">AS</span> <span class="k">month</span>
<span class="k">FROM</span> 
  <span class="n">useracct</span> <span class="k">AS</span> <span class="n">U</span>
<span class="k">WHERE</span>
  <span class="n">U</span><span class="p">.</span><span class="n">hostname</span> <span class="k">LIKE</span> <span class="s1">&#39;</span><span class="s1">%.gov</span><span class="s1">&#39;</span>
<span class="k">GROUP</span> <span class="k">BY</span>
  <span class="k">EXTRACT</span><span class="p">(</span><span class="k">month</span> <span class="k">FROM</span> <span class="n">U</span><span class="p">.</span><span class="n">lastlogin</span><span class="p">)</span>
</code></pre></div><p>We only use the column <code>lastlogin</code> and <code>hostname</code> in table <code>useracct</code>. However, the buffer pool will still pull all of the data in the disk page since we stored the data in block base on the disk. This will end up wasting memory to get useless data in this query(userID, userName, userPass are not being used).</p>
<h3 id="decomposition-storage-modeldsm">Decomposition Storage Model(DSM)</h3>
<p>The DBMS stores a single attribute (column) for all tuples contiguously in a block of data. Also known as a
‚Äúcolumn store.‚Äù Ideal for OLAP workloads.</p>
<ul>
<li>Advantages
<ul>
<li>Reduces the amount of wasted work during query execution because the DBMS only reads the data that it needs for that query.</li>
<li>Enables better compression because all of the values for the same attribute are stored contiguously.</li>
</ul>
</li>
<li>Disadvantages
<ul>
<li>Slow for point queries, inserts, updates, and deletes because of tuple splitting/stitching.</li>
</ul>
</li>
</ul>
<p>To put the tuples back together when we are using a column store, we can use:</p>
<ul>
<li>Fixed-length offsets: the attributes are all fixed-length. Then when the system
wants the attribute for a specific tuple, it knows how to jump to that spot in the file.</li>
<li>Embedded Tuple Ids: For every attribute in the columns, store the tuple id with it. The system would
also need extra information to tell it how to jump to every attribute that has that id.</li>
</ul>
<p><strong>Most DBMSs use fixed-length offsets.</strong></p>
<p>Row stores are usually better for OLTP, while column stores are better for OLAP.</p>
]]></content>
		</item>
		
		<item>
			<title>CMU Databases Systems: 03 Database Storage(pt.1)</title>
			<link>https://www.leewei.co/posts/cmu-15-445/database-storage-01/</link>
			<pubDate>Mon, 13 Apr 2020 20:26:07 +0800</pubDate>
			
			<guid>https://www.leewei.co/posts/cmu-15-445/database-storage-01/</guid>
			<description>Course Outline The main purpose of this course is How to build a software of database management system.
Storage  Volatile Devices: it needs power to keep its data persistent. Non-Volatile Devices: does not need continous power for device to retain its data.  Non-Volatile Memory: a storage device that is almost as fast as DRAM but with the persistence of a disk.
Disk-Oriented DBMS The data in the database files is organized into pages, and the first page is the directory page.</description>
			<content type="html"><![CDATA[<h2 id="course-outline">Course Outline</h2>
<p>The main purpose of this course is <code>How to build a software of database management system.</code></p>
<h2 id="storage">Storage</h2>
<ul>
<li>Volatile Devices: it needs power to keep its data persistent.</li>
<li>Non-Volatile Devices: does not need continous power for device to retain its data.</li>
</ul>
<p><strong>Non-Volatile Memory</strong>: a storage device that is almost as fast as DRAM but with the persistence of a disk.</p>
<h2 id="disk-oriented-dbms">Disk-Oriented DBMS</h2>
<p>The data in the database files is organized into pages, and the first page is the directory page.</p>
<pre><code>Execution Engine: execute queries
      |
      | ask for specific page(block)
      |
Buffer Pool: The buffer pool manager will ensure that the page is there while the
execution engine is operating on that memory.
      |
      | manages the movement back and forth between disk and memory
      |
Disk: save database files 
</code></pre><h2 id="why-not-use-the-os">Why not use the OS?</h2>
<p>The operating system doesn't know about what data the user wants to query, and how to operates the data in efficiency.</p>
<p>This high-level design goal is like virtual memory, where there is a large address space and a place for the
OS to bring in pages from disk.</p>
<p><strong>Never use <code>mmap</code> in your DBMS if you need to write.</strong></p>
<p>Having the DBMS implement these procedures itself gives it better control and performance</p>
<h2 id="file-storage">File Storage</h2>
<p>DBMS stores a database as files on disk.</p>
<p>The OS does not know anything about the contents of these files. Only the DBMS knows how to decipher
their contents, since it is encoded in a way specific to the DBMS.</p>
<p>The DBMS‚Äôs <code>storage manager</code>is responsible for managing a database‚Äôs files</p>
<h2 id="database-pages">Database Pages</h2>
<p>The DBMS organizes the database across one or more files in fixed-size blocks of data called <code>pages</code>.</p>
<ul>
<li>Pages contain different type of data</li>
<li>Most DBMS don't mix up types in one page</li>
<li>Some DBMS require self-contained pages, which means all the information needed to read the page is in the page itself</li>
<li>Most DBMS use fixed-size pages to avoid the engineering overhead</li>
</ul>
<h3 id="three-important-concept-in-pages">Three Important concept in pages:</h3>
<ol>
<li>Hardware page (usually 4 KB).</li>
<li>OS page (4 KB).</li>
<li>Database page (1-16 KB).</li>
</ol>
<p>The storage device guarantees an atomic write of the size of the hardware page(<code>failsafe write</code>). If the hardware page is
4 KB, then when the system tries to write 4 KB to the disk, either all 4 KB will be written, or none of it will.
This means that if our database page is larger than our hardware page, the DBMS will have to take extra
measures to ensure that the data gets written out safely since the program can get partway through writing a
database page to disk when the system crashes.</p>
<p>There are trade-offs between the size of the Hardware page and the Database page.</p>
<h2 id="database-heap">Database Heap</h2>
<p>A heap file organization is one of the ways to find the location of the page.
A heap file is an unordered collection of pages where tuples are stored in random order.</p>
<p>The DBMS can locate a page by using <code>Linked List</code> or <code>Page Directory</code>:</p>
<ul>
<li><code>Linked List</code>: Header page holds pointers to to a list of free pages and a list of data pages. However,
if the DBMS is looking for a specific page, it has to do a sequential scan on the data page list until it
finds the page it is looking for.</li>
<li><code>Page Directory</code>: DBMS maintains special pages that track locations of data pages along with the
amount of free space on each page.</li>
</ul>
<h2 id="page-layout">Page Layout</h2>
<p>Every page includes a header that records meta-data about the page‚Äôs contents:</p>
<ul>
<li>Page size</li>
<li>Checksum</li>
<li>DBMS version</li>
<li>Transaction visibility</li>
<li>Some systems require pages to be self-contained (e.g oracle)</li>
</ul>
<p>A <code>strawman approach</code> appends a new tuple to the end. However, problems arise when it
deletes a tuple or when the tuples have variable-length attributes.</p>
<p>There are two main approaches to laying out data in pages:</p>
<h3 id="slotted-pages-page-maps-slots-to-offsets">Slotted Pages: Page maps slots to offsets.</h3>
<ul>
<li>Most common approach used in DBMSs today</li>
<li>Header keeps track of the number of used slots and the offset of the starting location of last used slot
and a slot array, which keeps track of the location of the start of each tuple.</li>
<li>To add a tuple, the slot array will grow from the beginning to the end, and the data of the tuples will
grow from end to the beginning. The page is considered full when the slot array and the tuple data
meet.</li>
</ul>
<p><img src="../img/slotted-pages.png" alt="Slotted-Pages">
<a href="https://15445.courses.cs.cmu.edu/fall2019/slides/03-storage1.pdf">Original Slides</a></p>
<h3 id="log-structured-instead-of-storing-tuples-the-dbms-only-stores-log-records">Log-Structured: Instead of storing tuples, the DBMS only stores log records</h3>
<ul>
<li>Stores records to file of how the database was modified (insert, update, deletes)</li>
<li>To read a record, the DBMS scans the log file backwards and ‚Äúrecreates‚Äù the tuple</li>
<li>Fast writes, potentially slow reads</li>
<li>Works well on append-only storage because the DBMS cannot go back and update the data</li>
</ul>
<h2 id="tuple-layout">Tuple Layout</h2>
<p>A tuple is a sequence of bytes. It is DBMS‚Äôs job to interpret those bytes into attribute types and values.</p>
<h3 id="tuple-header-contains-meta-data-about-the-tuple">Tuple Header: Contains meta-data about the tuple</h3>
<ul>
<li>Visibility information for the DBMS‚Äôs concurrency control protocol</li>
<li>Bit Map for NULL values</li>
<li>Note that the DBMS does not need to store meta-data about the schema of the database here</li>
</ul>
<h3 id="tuple-data-actual-data-for-attributes">Tuple Data: Actual data for attributes</h3>
<ul>
<li>Attributes are typically stored in the order that you specify them when you create the table</li>
<li>Most DBMSs do not allow a tuple to exceed the size of a page</li>
</ul>
<h3 id="unique-identifierrecord-id">Unique Identifier(Record ID)</h3>
<ul>
<li>Each tuple in the database is assigned a unique identifier</li>
<li>Most common: page id + (offset or slot)</li>
</ul>
<h3 id="denormalized-tuple-data">Denormalized Tuple Data</h3>
<p>If two tables are related, the DBMS can ‚Äúpre-join‚Äù them, so the tables end up
on the same page. This makes reads faster since the DBMS only has to load in one page rather than two
separate pages, but it makes updates more expensive since the DBMS needs more space for each tuple.</p>
]]></content>
		</item>
		
		<item>
			<title>PostgreSQL: Server setup on Ubuntu 18.04</title>
			<link>https://www.leewei.co/posts/2020/postgre-sql-set-up/</link>
			<pubDate>Fri, 03 Apr 2020 09:57:59 +0800</pubDate>
			
			<guid>https://www.leewei.co/posts/2020/postgre-sql-set-up/</guid>
			<description>Install PostgreSQL Create a file /etc/apt/sources.list.d/pgdg.list and add the following line to that file deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main. We can get the PostgreSQL APT repository from the official website.
$ sudo sh -c &amp;#39;echo &amp;#34;deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main&amp;#34; &amp;gt;&amp;gt; /etc/apt/sources.list.d/pgdg.list&amp;#39; Import the repository public key
$ wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - Update the repository list and install PostgreSQL
$ sudo apt-get update $ sudo apt-get -y install postgresql Check if PostgreSQL is running as expected</description>
			<content type="html"><![CDATA[<h2 id="install-postgresql">Install PostgreSQL</h2>
<p>Create a file <code>/etc/apt/sources.list.d/pgdg.list</code> and add the following line to that file <code>deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main</code>. We can get the PostgreSQL APT repository from the official <a href="https://www.postgresql.org/download/linux/ubuntu/">website</a>.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo sh -c <span class="s1">&#39;echo &#34;deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main&#34; &gt;&gt; /etc/apt/sources.list.d/pgdg.list&#39;</span>
</code></pre></div><p>Import the repository public key</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc <span class="p">|</span> sudo apt-key add - 
</code></pre></div><p>Update the repository list and install PostgreSQL</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt-get update
$ sudo apt-get -y install postgresql
</code></pre></div><p>Check if PostgreSQL is running as expected</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ ps -ef <span class="p">|</span> grep postgres
postgres  <span class="m">4477</span>     <span class="m">1</span>  <span class="m">0</span> 02:59 ?        00:00:00 /usr/lib/postgresql/12/bin/postgres -D /var/lib/postgresql/12/main -c <span class="nv">config_file</span><span class="o">=</span>/etc/postgresql/12/main/postgresql.conf
postgres  <span class="m">4487</span>  <span class="m">4477</span>  <span class="m">0</span> 02:59 ?        00:00:00 postgres: 12/main: checkpointer
postgres  <span class="m">4488</span>  <span class="m">4477</span>  <span class="m">0</span> 02:59 ?        00:00:00 postgres: 12/main: background writer
postgres  <span class="m">4489</span>  <span class="m">4477</span>  <span class="m">0</span> 02:59 ?        00:00:00 postgres: 12/main: walwriter
postgres  <span class="m">4490</span>  <span class="m">4477</span>  <span class="m">0</span> 02:59 ?        00:00:00 postgres: 12/main: autovacuum launcher
postgres  <span class="m">4491</span>  <span class="m">4477</span>  <span class="m">0</span> 02:59 ?        00:00:00 postgres: 12/main: stats collector
postgres  <span class="m">4492</span>  <span class="m">4477</span>  <span class="m">0</span> 02:59 ?        00:00:00 postgres: 12/main: logical replication launcher
lee       <span class="m">5976</span>  <span class="m">1521</span>  <span class="m">0</span> 03:16 pts/0    00:00:00 grep --color<span class="o">=</span>auto postgres
</code></pre></div><p>Switch to root and a default <code>postgres</code> user that PostgreSQL created.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo su
$ su - postgres
$ whoami
postgres
</code></pre></div><p>Log into the PostgreSQL cluster</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ psql postgres

psql <span class="o">(</span>12.2 <span class="o">(</span>Ubuntu 12.2-2.pgdg18.04+1<span class="o">)</span><span class="o">)</span>
Type <span class="s2">&#34;help&#34;</span> <span class="k">for</span> help.

<span class="nv">postgres</span><span class="o">=</span><span class="c1"># \l</span>
                              List of databases
   Name    <span class="p">|</span>  Owner   <span class="p">|</span> Encoding <span class="p">|</span> Collate <span class="p">|</span>  Ctype  <span class="p">|</span>   Access privileges
-----------+----------+----------+---------+---------+-----------------------
 postgres  <span class="p">|</span> postgres <span class="p">|</span> UTF8     <span class="p">|</span> C.UTF-8 <span class="p">|</span> C.UTF-8 <span class="p">|</span>
 template0 <span class="p">|</span> postgres <span class="p">|</span> UTF8     <span class="p">|</span> C.UTF-8 <span class="p">|</span> C.UTF-8 <span class="p">|</span> <span class="o">=</span>c/postgres          +
           <span class="p">|</span>          <span class="p">|</span>          <span class="p">|</span>         <span class="p">|</span>         <span class="p">|</span> <span class="nv">postgres</span><span class="o">=</span>CTc/postgres
 template1 <span class="p">|</span> postgres <span class="p">|</span> UTF8     <span class="p">|</span> C.UTF-8 <span class="p">|</span> C.UTF-8 <span class="p">|</span> <span class="o">=</span>c/postgres          +
           <span class="p">|</span>          <span class="p">|</span>          <span class="p">|</span>         <span class="p">|</span>         <span class="p">|</span> <span class="nv">postgres</span><span class="o">=</span>CTc/postgres
<span class="o">(</span><span class="m">3</span> rows<span class="o">)</span>
</code></pre></div><h2 id="database-cluster">Database Cluster</h2>
<p>In order to proceed further operations, we need to initialize a database storage area on the disk. It is called a <code>database cluster</code>.
A <code>database cluster</code> is a collection of databases that is managed by a single instance on the database server.</p>
<p>A database cluster stores all its data in a single directory in the file system. It is called a <code>data directory</code> or <code>data area</code>. We will call it <code>data directory</code> in the following paragraph to avoid the confusion of High Availability clustering.</p>
<p>However, normally we don't need to use <code>pg_createcluster</code>(for Ubuntu and Debian users) or <code>initd</code> to initialize a database directory, because <code>apt-get install postgresql</code> already creates a default directory.</p>
<h3 id="how-to-find-the-location-of-where-postgresql-stores-its-data">How to find the location of where PostgreSQL stores its data?</h3>
<p>In our case, <code>/var/lib/postgresql/12/main</code> is the directory where PostgreSQL stores its data.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ ps auxw<span class="p">|</span>grep postgres<span class="p">|</span>grep -- -D  
postgres  <span class="m">4477</span>  0.0  4.7 <span class="m">321364</span> <span class="m">27896</span> ?        Ss   02:59   0:00 /usr/lib/postgresql/12/bin/postgres -D /var/lib/postgresql/12/main -c <span class="nv">config_file</span><span class="o">=</span>/etc/postgresql/12/main/postgresql.conf
postgres  <span class="m">7907</span>  0.0  0.1  <span class="m">14852</span>  <span class="m">1072</span> pts/0    S+   04:46   0:00 grep -- -D
</code></pre></div><p>Another way to check the data directory is to see <code>postgresal.conf</code></p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ less /etc/postgresql/12/main/postgresql.conf
</code></pre></div><p>After using <code>less</code> command, use <code>/data_directory</code> to find the directory. In our case:</p>
<pre><code># The default values of these variables are driven from the -D command-line
# option or PGDATA environment variable, represented here as ConfigDir.

data_directory = '/var/lib/postgresql/12/main'
</code></pre><h3 id="access-control-for-database-directory">Access Control for database directory</h3>
<ul>
<li><code>pg_createcluster</code> will refuse to run if the data directory exists and already contains files. This will avoid overwriting to the exist database</li>
<li><code>pg_createcluster</code> revokes access permissions from everyone but the PostgreSQL user, and optionally, group. Group access, when enabled, is read-only</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>CMU Databases Systems: 02 Advanced SQL</title>
			<link>https://www.leewei.co/posts/cmu-15-445/advanced-sql/</link>
			<pubDate>Thu, 02 Apr 2020 19:51:08 +0800</pubDate>
			
			<guid>https://www.leewei.co/posts/cmu-15-445/advanced-sql/</guid>
			<description>Relational Languages User only needs to specify the data they want using declaritive language(e.g. SQL), not how to compute it. The DBMS is responsible for optimizing a query plan.
SQL History SQL&#39;s full name is Structured Query Language, IBM originally called it SEQUEL, but got sued by some people in the UK. So they ended up called it SQL.
 ANSI Standard in 1986 ISO in 1987  Most DBMSs at least supports SQL-92.</description>
			<content type="html"><![CDATA[<h2 id="relational-languages">Relational Languages</h2>
<p>User only needs to specify the data they want using declaritive language(e.g. SQL), not how to compute it.
The DBMS is responsible for optimizing a query plan.</p>
<h2 id="sql-history">SQL History</h2>
<p><code>SQL</code>'s full name is <code>Structured Query Language</code>, IBM originally called it <code>SEQUEL</code>, but got sued by some people in the UK. So they ended up called it <code>SQL</code>.</p>
<ul>
<li>ANSI Standard in 1986</li>
<li>ISO in 1987</li>
</ul>
<p>Most DBMSs at least supports SQL-92.</p>
<ul>
<li>Data Manipulation Language (DML): SELECT, INSERT, UPDATE, DELETE.</li>
<li>Data Definition Language (DDL): Schema definition.</li>
<li>Data Control Language (DCL): Security, access controls.</li>
</ul>
<p><strong>Important: SQL is based on <code>bags</code>.</strong></p>
<ul>
<li>lists: ordered, allow duplicates,</li>
<li>sets: unordered, no duplicates</li>
<li>bags: unordered, allow duplicates</li>
</ul>
<p>There is a reason why SQL is based on <code>bags</code>, it'll need extra work for DBMS to use <code>lists</code> or <code>sets</code>. DBMS only needs to order the output only if the user want to order the results. Therefore, using <code>bags</code> can let the database work more efficiently.</p>
<h2 id="aggregates">Aggregates</h2>
<p>An aggregation function takes in a bag of tuples as its input and then produces a single scalar value as its output. <code>Can only be used in SELECT output list.</code></p>
<h3 id="group-by">GROUP BY</h3>
<p>Output of other columns outside of an aggregate is undefined (e.cid is undefined below). The aggregation function only returns a single value, so the DBMS don't know which course id to output.</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="o">#</span> <span class="n">This</span> <span class="n">will</span> <span class="k">not</span> <span class="k">work</span><span class="p">.</span>

<span class="k">SELECT</span> <span class="k">AVG</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">gpa</span><span class="p">)</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">cid</span>
<span class="k">FROM</span> <span class="n">enrolled</span> <span class="k">AS</span> <span class="n">e</span><span class="p">,</span> <span class="n">student</span> <span class="k">AS</span> <span class="n">s</span>
<span class="k">WHERE</span> <span class="n">e</span><span class="p">.</span><span class="n">sid</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">sid</span><span class="p">;</span>
</code></pre></div><p>Non-aggregated values in <code>SELECT</code> output clause must be used in a <code>GROUP BY</code> command:</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">SELECT</span> <span class="k">AVG</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">gpa</span><span class="p">)</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">cid</span>
<span class="k">FROM</span> <span class="n">enrolled</span> <span class="k">AS</span> <span class="n">e</span><span class="p">,</span> <span class="n">student</span> <span class="k">AS</span> <span class="n">s</span>
<span class="k">WHERE</span> <span class="n">e</span><span class="p">.</span><span class="n">sid</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">sid</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">e</span><span class="p">.</span><span class="n">cid</span><span class="p">;</span>
</code></pre></div><h3 id="having">HAVING</h3>
<p>Filters output results after aggregation. Like a <code>WHERE</code> clause for a
<code>GROUP BY</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="o">#</span> <span class="n">This</span> <span class="n">will</span> <span class="k">not</span> <span class="k">work</span> <span class="n">because</span> <span class="n">we</span> <span class="n">have</span> <span class="k">not</span> <span class="n">aggregated</span> <span class="n">s</span><span class="p">.</span><span class="n">gpa</span> <span class="k">in</span> <span class="n">the</span> <span class="k">WHERE</span> <span class="n">clause</span> <span class="n">yet</span><span class="p">.</span>
<span class="o">#</span> <span class="n">So</span> <span class="n">this</span> <span class="k">SQL</span> <span class="k">statement</span> <span class="n">will</span> <span class="k">not</span> <span class="k">work</span><span class="p">,</span> <span class="n">because</span> <span class="n">it</span> <span class="n">cannot</span> <span class="n">filter</span> <span class="n">avg_gpa</span> <span class="n">that</span> <span class="n">have</span> <span class="k">not</span> <span class="n">been</span> <span class="n">aggregated</span>

<span class="k">SELECT</span> <span class="k">AVG</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">gpa</span><span class="p">)</span> <span class="k">AS</span> <span class="n">avg_gpa</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">cid</span>
<span class="k">FROM</span> <span class="n">enrolled</span> <span class="k">AS</span> <span class="n">e</span><span class="p">,</span> <span class="n">student</span> <span class="k">AS</span> <span class="n">s</span>
<span class="k">WHERE</span> <span class="n">e</span><span class="p">.</span><span class="n">sid</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">sid</span>
<span class="k">AND</span> <span class="n">avg_gpa</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">.</span><span class="mi">9</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">e</span><span class="p">.</span><span class="n">cid</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">SELECT</span> <span class="k">AVG</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">gpa</span><span class="p">)</span> <span class="k">AS</span> <span class="n">avg_gpa</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">cid</span>
<span class="k">FROM</span> <span class="n">enrolled</span> <span class="k">AS</span> <span class="n">e</span><span class="p">,</span> <span class="n">student</span> <span class="k">AS</span> <span class="n">s</span>
<span class="k">WHERE</span> <span class="n">e</span><span class="p">.</span><span class="n">sid</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">sid</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">e</span><span class="p">.</span><span class="n">cid</span>
<span class="k">HAVING</span> <span class="n">avg_gpa</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">.</span><span class="mi">9</span><span class="p">;</span>
</code></pre></div><h2 id="string-operations">String Operations</h2>
<p>The SQL standard says that strings are <code>case sensitive</code> and <code>single-quotes only</code>.</p>
<h3 id="like">LIKE</h3>
<p>The <code>LIKE</code> keyword is used for string matching.</p>
<ul>
<li><code>%</code> matches any substrings (including empty)</li>
<li><code>_</code> matches any one character</li>
</ul>
<h3 id="concatenate">Concatenate</h3>
<p>Use <code>||</code> operator to concatenate two or more strings together.</p>
<h2 id="datetime-operations">Date/Time Operations</h2>
<p>Operations to manipulate and modify DATE/TIME attributes.
Different DBMS supports different syntax.</p>
<h2 id="output-redirection--control">Output Redirection &amp; Control</h2>
<p>We can store queries to another table.</p>
<h3 id="new-table">New Table</h3>
<p>Store the output of the query into a new (permanent) table.</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="n">cid</span> <span class="k">INTO</span> <span class="n">CourseIds</span> <span class="k">FROM</span> <span class="n">enrolled</span><span class="p">;</span>
</code></pre></div><h3 id="existing-table">Existing Table</h3>
<p>Store the output of the query into a table that
already exists in the database. The
target table must have the same number of columns with the same types as the target table, but the
name of the columns in the output query do not have to match.</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">CourseIds</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="n">cid</span> <span class="k">FROM</span> <span class="n">enrolled</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><h3 id="order-by">ORDER BY</h3>
<p>Since results SQL are unordered, you have to use the <code>ORDER BY</code> clause to impose a sort on tuples, here is an example:</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">SELECT</span> <span class="n">sid</span> <span class="k">FROM</span> <span class="n">enrolled</span> <span class="k">WHERE</span> <span class="n">cid</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="s1">15-721</span><span class="s1">&#39;</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">grade</span> <span class="k">DESC</span><span class="p">,</span> <span class="n">sid</span> <span class="k">ASC</span><span class="p">;</span>
</code></pre></div><h3 id="limit">LIMIT</h3>
<p>Limit the number of tuples returned in output.</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="o">#</span> <span class="k">OFFSET</span> <span class="n">specifies</span> <span class="n">how</span> <span class="n">many</span> <span class="n">tuples</span> <span class="k">to</span> <span class="n">skip</span> <span class="n">within</span> <span class="n">the</span> <span class="k">result</span>
<span class="o">#</span> <span class="n">Use</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="k">to</span> <span class="n">guarantee</span> <span class="n">the</span> <span class="n">same</span> <span class="k">result</span> <span class="k">in</span> <span class="k">every</span> <span class="n">queries</span>

<span class="k">SELECT</span> <span class="n">sid</span><span class="p">,</span> <span class="n">name</span> <span class="k">FROM</span> <span class="n">student</span> <span class="k">WHERE</span> <span class="n">login</span> <span class="k">LIKE</span> <span class="s1">&#39;</span><span class="s1">%@cs</span><span class="s1">&#39;</span>
<span class="k">LIMIT</span> <span class="mi">10</span> <span class="k">OFFSET</span> <span class="mi">20</span><span class="p">;</span>
</code></pre></div><h2 id="nested-queries">Nested Queries</h2>
<p>Queries containing other queries. Nested queries are often difficult to optimize.</p>
<p><strong>Example: Get the names of students that are enrolled in ‚Äô15-445‚Äô.</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">SELECT</span> <span class="n">name</span> <span class="k">FROM</span> <span class="n">student</span>
<span class="k">WHERE</span> <span class="n">sid</span> <span class="k">IN</span> <span class="p">(</span> <span class="k">SELECT</span> <span class="n">sid</span> <span class="k">FROM</span> <span class="n">enrolled</span> <span class="k">WHERE</span> <span class="n">cid</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="s1">15-445</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">;</span>

<span class="o">|</span><span class="o">|</span> <span class="n">These</span> <span class="n">two</span> <span class="n">queries</span> <span class="n">have</span> <span class="n">the</span> <span class="n">same</span> <span class="k">output</span>

<span class="k">SELECT</span> <span class="n">name</span> <span class="k">FROM</span> <span class="n">student</span>
<span class="k">WHERE</span> <span class="n">sid</span> <span class="o">=</span><span class="k">ANY</span><span class="p">(</span> <span class="k">SELECT</span> <span class="n">sid</span> <span class="k">FROM</span> <span class="n">enrolled</span> <span class="k">WHERE</span> <span class="n">cid</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="s1">15-445</span><span class="s1">&#39;</span><span class="p">)</span><span class="p">;</span>
</code></pre></div><ul>
<li>ALL: Must satisfy expression for all rows in sub-query.</li>
<li>ANY: Must satisfy expression for at least one row in sub-query.</li>
<li>IN: Equivalent to =ANY().</li>
<li>EXISTS: At least one row is returned.</li>
</ul>
<h2 id="window-functions">Window Functions</h2>
<p>Performs ‚Äúmoving‚Äù calculation across set of tuples. Like an aggregation but it still returns the original tuples.</p>
<h3 id="functions">Functions</h3>
<p>Functions can be any of the aggregation functions above. Can also be a special window functions:</p>
<ul>
<li>ROW NUMBER: The number of the current row.</li>
<li>RANK: The order position of the current row.</li>
</ul>
<h3 id="grouping">Grouping</h3>
<p>The <code>OVER</code> clause specifies how to group together tuples when computing the window function. Use <code>PARTITION BY</code> to specify group.</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">SELECT</span> <span class="n">cid</span><span class="p">,</span> <span class="n">sid</span><span class="p">,</span> <span class="n">ROW_NUMBER</span><span class="p">(</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="n">PARTITION</span> <span class="k">BY</span> <span class="n">cid</span><span class="p">)</span>
<span class="k">FROM</span> <span class="n">enrolled</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">cid</span><span class="p">;</span>
</code></pre></div><p>We can also put an <code>ORDER BY</code> within <code>OVER</code> to ensure the ordering of results.</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">SELECT</span> <span class="o">*</span><span class="p">,</span> <span class="n">ROW_NUMBER</span><span class="p">(</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">cid</span><span class="p">)</span>
<span class="k">FROM</span> <span class="n">enrolled</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">cid</span><span class="p">;</span>
</code></pre></div><p><strong>Important: The DBMS computes RANK after the window function sorting, whereas it computes ROW NUMBER before the sorting.</strong></p>
<h2 id="common-table-expressions">Common Table Expressions</h2>
<p>Common Table Expressions (CTEs) is like a temporary table for just one query.</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">WITH</span> <span class="n">cteName</span> <span class="k">AS</span> <span class="p">(</span>
<span class="k">SELECT</span> <span class="mi">1</span>
<span class="p">)</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">cteName</span><span class="p">;</span>
</code></pre></div><p>Add <code>RECURSIVE</code> keyword after WITH allows a CTE to reference itself.</p>
<p><strong>Example: Print the sequence of numbers from 1 to 10.</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">WITH</span> <span class="k">RECURSIVE</span> <span class="n">cteSource</span> <span class="p">(</span><span class="n">counter</span><span class="p">)</span> <span class="k">AS</span> <span class="p">(</span>
<span class="p">(</span><span class="k">SELECT</span> <span class="mi">1</span><span class="p">)</span>
<span class="k">UNION</span>
<span class="p">(</span><span class="k">SELECT</span> <span class="n">counter</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">FROM</span> <span class="n">cteSource</span>
<span class="k">WHERE</span> <span class="n">counter</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">)</span>
<span class="p">)</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">cteSource</span><span class="p">;</span>
</code></pre></div><p>Sometimes <code>RECURSIVE</code> can be dangerous to use because we might have an infinite loop.</p>
<h3 id="we-sould-always-strive-to-compute-our-answer-in-one-sql-statement">We sould always strive to compute our answer in one SQL statement.</h3>
]]></content>
		</item>
		
		<item>
			<title>CMU Databases Systems: 01 Relational Model</title>
			<link>https://www.leewei.co/posts/cmu-15-445/relational-model/</link>
			<pubDate>Thu, 02 Apr 2020 17:29:54 +0800</pubDate>
			
			<guid>https://www.leewei.co/posts/cmu-15-445/relational-model/</guid>
			<description>I got rejected by CMU last week. Not surprised by the result, because I prepared the application in a short amount of time. Also, I didn&#39;t do well on the online coding test. Although the outcome is quite depressing, I still managed to look on the bright side. &amp;ldquo;There are numerous CMU online courses, why don&#39;t I just take these courses and do the assignments?&amp;rdquo; Plus, thanks to the freaking Corona virus.</description>
			<content type="html"><![CDATA[<p>I got rejected by CMU last week. Not surprised by the result, because I prepared the application in a short amount of time. Also, I didn't do well on the online coding test. Although the outcome is quite depressing, I still managed to look on the bright side. &ldquo;There are numerous CMU online courses, why don't I just take these courses and do the assignments?&rdquo; Plus, thanks to the freaking Corona virus. I have plenty of time study this course.</p>
<p>Here are the notes that I took in the course.</p>
<h2 id="database--dbms">Database &amp; DBMS</h2>
<h3 id="what-is-database">What is Database?</h3>
<p><strong>Database</strong> is collection of data that models some apsect of the real-world. e.g., the items in a shopping mall.</p>
<h3 id="what-is-dbmsdatabase-management-system">What is DBMS(Database Management System)?</h3>
<p><strong>DBMS</strong> is the software that manages a database. e.g., MySQL, PostgreSQL, Oracle.</p>
<h3 id="what-can-dbms-provide-us">What can DBMS provide us?</h3>
<p>The general purpose of DBMS is to allow users to create, define, update, query and administrate the database.</p>
<h2 id="early-dbms">Early DBMS</h2>
<ul>
<li>logical layer: the entities the database has</li>
<li>physical layer: how the entities are being stored</li>
</ul>
<p>Database applications were difficult to build and maintain because there was a tight coupling between logical
and physical layers. It simply means that we need to change the code whenver we want to change the physical layer.</p>
<h2 id="relational-model">Relational Model</h2>
<p>Tedd Codd first proposed the idea of Relational Model in 1970. This relational model has three key points:</p>
<ul>
<li>Store database in simple data structures (relations).</li>
<li>Access data through high-level language.</li>
<li>Physical storage left up to implementation.</li>
</ul>
<p>The relational model provides users a database abstraction.</p>
<h3 id="what-is-data-models">What is data models?</h3>
<p><strong>Data models</strong> define the logical structure of databases, how to describe data in the database. The relational model is one of the example of data models. For instance, there are other data models like, Key-value, Graph, Network model etc.</p>
<h3 id="what-is-schema">What is schema?</h3>
<p>A <strong>schema</strong> represents what data actually stores. For instance, the schema in a table has NAME(CHAR), representing the table can store these types of data.</p>
<table>
<thead>
<tr>
<th>name</th>
<th>year</th>
<th>country</th>
</tr>
</thead>
</table>
<h3 id="three-concepts-in-relational-model">Three concepts in relational model</h3>
<ul>
<li>Structure: The definition of relations and their contents. This is the attributes(Table, Columns) the relations have and
the values that those attributes can hold.</li>
<li>Integrity: Ensure the database‚Äôs contents satisfy constraints. An example constraint would be that
any value for the year attribute(year column) has to be a number.</li>
<li>Manipulation: How to access and modify a database‚Äôs contents</li>
</ul>
<h3 id="what-is-relation">What is relation?</h3>
<p>A <strong>relation(table)</strong> is an unordered set that contains the relationship of attributes that represent entities(Rows).</p>
<p>For instance, the relation between the name, year and country(attributes) for an music artist.</p>
<table>
<thead>
<tr>
<th>name</th>
<th>year</th>
<th>country</th>
</tr>
</thead>
<tbody>
<tr>
<td>Wu Tang Clan</td>
<td>1992</td>
<td>USA</td>
</tr>
<tr>
<td>Notorious Big</td>
<td>1992</td>
<td>USA</td>
</tr>
<tr>
<td>Ice Cube</td>
<td>1989</td>
<td>USA</td>
</tr>
</tbody>
</table>
<h3 id="what-is-tuples">What is tuples?</h3>
<p>A <strong>tuple(row)</strong> is a set of attribute values (also known as its domain) in the relation.</p>
<h3 id="n-ary-relation--table-with-n-columns">n-ary relation = table with n columns</h3>
<h2 id="keys">Keys</h2>
<h3 id="what-is-primary-key">What is primary key?</h3>
<p>A <strong>primary key(PK)</strong> identifies a single tuple.</p>
<h3 id="what-is-foreign-key">What is foreign key?</h3>
<p>A <strong>foreign</strong> key specifies that an attribute from one relation has to map to a tuple in another relation.</p>
<p>Table Artist</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>year</th>
<th>country</th>
</tr>
</thead>
<tbody>
<tr>
<td>123</td>
<td>Wu Tang Clan</td>
<td>1992</td>
<td>USA</td>
</tr>
<tr>
<td>456</td>
<td>Notorious Big</td>
<td>1992</td>
<td>USA</td>
</tr>
<tr>
<td>789</td>
<td>Ice Cube</td>
<td>1989</td>
<td>USA</td>
</tr>
</tbody>
</table>
<p>Table Album</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>artist</th>
<th>year</th>
</tr>
</thead>
<tbody>
<tr>
<td>12</td>
<td>Enter the Wu Tang</td>
<td>123</td>
<td>1993</td>
</tr>
<tr>
<td>34</td>
<td>Amerikaz most wanted</td>
<td>999</td>
<td>1996</td>
</tr>
</tbody>
</table>
<p>Table ArtistAlbum</p>
<table>
<thead>
<tr>
<th>artist_id</th>
<th>album_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>123</td>
<td>11</td>
</tr>
<tr>
<td>123</td>
<td>55</td>
</tr>
</tbody>
</table>
<p>Table ArtistAlbum can map the artist to the album.</p>
<h2 id="data-manipulation-languagedml">Data Manipulation Language(DML)</h2>
<p><strong>DML</strong> is a language to store and retrieve information from a database.</p>
<ul>
<li>Procedural: The query specifies the (high-level) strategy the DBMS should use to find the desired result. -&gt; <strong>Relation Algebra</strong></li>
<li>Non-Procedural: The query specifies only what data is wanted and not how to find it.</li>
</ul>
<h2 id="relational-algebra">Relational Algebra</h2>
<p><strong>Relational Algebra</strong> is a set of fundamental operations to retrieve and manipulate tuples in a relation. Each operator takes in one or more relations as inputs, and outputs a new relation.</p>
<h3 id="select">Select</h3>
<ul>
<li>Syntax: œÉ predicate(R).</li>
<li>Select is like a filter</li>
</ul>
<h3 id="projection">Projection</h3>
<ul>
<li>Syntax: œÄ A1,A2,. . . ,An(R).</li>
<li>Projection can rearrange and manipulate data</li>
</ul>
<h3 id="union">Union</h3>
<ul>
<li>Union ouputs the combination of two relations</li>
<li>The two input relations have to have the exact same attributes(the same schema).</li>
<li>Syntax: (R ‚à™ S).</li>
</ul>
<h3 id="intersection">Intersection</h3>
<ul>
<li>Intersection only outputs the same tuples in both relations</li>
<li>The two input relations have to have the exact same attributes(the same schema).</li>
<li>Syntax: (R ‚à© S).</li>
</ul>
<h3 id="difference">Difference</h3>
<ul>
<li>Difference only outputs the tuples that appear in the first relation but not in the second relation</li>
<li>The two input relations have to have the exact same attributes.</li>
<li>Syntax: (R ‚àí S).</li>
</ul>
<h3 id="product">Product</h3>
<ul>
<li>Product outputs a relation that contains all possible combinations for tuples from the input relations.</li>
<li>Cross join</li>
<li>Syntax: (R √ó S).</li>
</ul>
<h3 id="join">Join</h3>
<ul>
<li>Join outputs a relation that contains all the tuples that are a combination of two tuples where for each attribute that the two relations share, the values for that attrubite of both tuples is the
same.</li>
<li>The difference between Join and Union is that Join doesn't need to have two exact same relations.</li>
<li>Syntax: (R ./ S).</li>
</ul>
<h2 id="observation">Observation</h2>
<p><strong>Relational algebra</strong> is a procedural language because it defines the high level-steps of how to compute a
query.</p>
<p>For example, œÉ b_id=102(R ./ S) is saying to first do the join of R and S and then do the select,
whereas (R ./ (œÉ b_id=102(S))) will do the select on S first, and then do the join.</p>
<p>These two statements will actually produce the same answer, but if there is only 1 tuple in S with b id=102 out of a billion tuples, then
(R ./ (œÉ b_id=102(S))) will be significantly faster than œÉ b_id=102(R ./ S).</p>
<p>A better approach is to say the result you want, and let the DBMS decide the steps it wants to take to compute the query</p>
<p>SQL is not the only one to express quries to a relational model, it just happens to be the most popular one.</p>
<ul>
<li>SQL is the de facto(in real life) standard.</li>
<li>The relational model is independent of any query language implementation</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>MySQL/Mariadb Best Practice</title>
			<link>https://www.leewei.co/posts/2020/mysql-mariadb-best-practice/</link>
			<pubDate>Sat, 18 Jan 2020 14:37:02 +0800</pubDate>
			
			<guid>https://www.leewei.co/posts/2020/mysql-mariadb-best-practice/</guid>
			<description>A note for the best practice of MySQL/MariaDB. (To be updated)
Datatype  Use CHAR datatype if the length of the data is fixed. Instead, use VARCHAR to store variable length data. It is slightly more faster to use CHAR over VARCHAR when the data length is fixed. Avoid using BLOB datatype. Store BLOB data might boost up the total size of the database. We can consifer storing these blob data into other servers, and we store the URL link to these blob.</description>
			<content type="html"><![CDATA[<p>A note for the best practice of MySQL/MariaDB. (To be updated)</p>
<h3 id="datatype">Datatype</h3>
<ol>
<li>Use <code>CHAR</code> datatype if the length of the data is fixed. Instead, use <code>VARCHAR</code> to store variable length data.
It is slightly more faster to use <code>CHAR</code> over <code>VARCHAR</code> when the data length is fixed.</li>
<li>Avoid using <code>BLOB</code> datatype. Store <code>BLOB</code> data might boost up the total size of the database. We can consifer storing these blob data into other servers, and we store the URL link to these blob.
GCP Cloud Storage, AWS S3 are suited for this kind of data.</li>
</ol>
<h3 id="table">Table</h3>
<ol>
<li>Backup the table before altering it.</li>
<li>Rather changing the table with real data, alter and test a duplicate table.</li>
</ol>
<h3 id="sql-operation">SQL operation</h3>
<h3 id="operation">Operation</h3>
<ol>
<li>
<p>Execute backup command in OS level, not from the mysql client. Make sure that both the users in MySQL and OS have the write permission.</p>
<pre><code>// Backup a specific table data to the '/tmp' directory in the OS
$ mysqldump --user='[USER]' -p \
[DATABASE_NAME] [TABLE_NAME] &gt; /tmp/test.sql

// Backup database
$ mysqldump --user='[USER]' -p \
[DATABASE_NAME] &gt; /tmp/test.sql
</code></pre></li>
<li>
<p>Restore database backup</p>
<pre><code>// Restore database
$ mysql --user='[USER]' -p \
[DATABASE_NAME] &lt; /tmp/test.sql
</code></pre></li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Startup Playbook: a startup framework</title>
			<link>https://www.leewei.co/posts/2019/start-up-playbook-the-idea/</link>
			<pubDate>Sun, 22 Dec 2019 12:48:19 +0800</pubDate>
			
			<guid>https://www.leewei.co/posts/2019/start-up-playbook-the-idea/</guid>
			<description>I found an startup playbook that is created by Sam Altman, former president of Y Combinator. It&#39;s a great website if anyone wants to start their company in the future. Here is the summery of this playbook and some of my thoughts:
The Idea This is the most important part of starting a startup. A startup needs to focus on what it is solving and who needs this product. It&#39;s not like you can think of a idea overnight, I think sometimes a good idea came from stupid, shitty topic.</description>
			<content type="html"><![CDATA[<p>I found an <a href="https://playbook.samaltman.com/">startup playbook</a> that is created by Sam Altman, former president of Y Combinator. It's a great website if anyone wants to start their company in the future.
Here is the summery of this playbook and some of my thoughts:</p>
<h3 id="the-idea">The Idea</h3>
<p>This is the most important part of starting a startup. A startup needs to focus on what it is solving and who needs this product. It's not like you can think of a idea overnight, I think sometimes a good idea came from stupid, shitty topic. For instance, I really like a comedy called &ldquo;Silicon Valley&rdquo;. The story focus on a group of people that are building, iterating a product and the shit things they confront. Richard, one of the protagonists figured out &ldquo;Middle Out Algorithm&rdquo; when the team are discussing how much time they will need to jerk off all of the people in TechCrunch.</p>
<p>Maybe I'll start with a simple idea that people need to solve. My colleague, which is a account manager, she switches messeging apps eveyday to communicate with different customers. An All-In-One messege app can help her work more efficiently. After some research, I found some desktop apps that have already been done by people. It's impossible to build an All-In-One mobile app because it means that Facebook, Line, Skype, WeChat need to release API for their messeging service.</p>
<p>The playbook recommended that don't try to create a startup if you don't have a good idea. From their experiences, all of the companies that start off with no ideas failed at the end. Here are the advices from the playbook:</p>
<ol>
<li>Learn about a lot of different things.</li>
<li>Practice noticing problems, things that seem inefficient, and major technological shifts.</li>
<li>Work on projects you find interesting.</li>
<li>Go out of your way to hang around smart, interesting people.</li>
</ol>
<h3 id="a-great-team">A Great Team</h3>
<p>I think there are two factors to build a great team. Firstly, the characteristics of the founder/co-founder. I think the ability to bound people together and passion are very important. The founder doesn't need to be the best coder or the smartest guy, but he/she needs to have the passion to keep things running. I would like to call it &ldquo;Passion Driven Development&rdquo;. üòè Founders need to precise, determined and passionate to keep employees work for this company. Secondly, the employees that hired by the founder. It is crucial to find people with passion and agree with our ideas. The company culture we want decides the people who we are looking for.</p>
<p>The book also mentioned that tech startups need to have one founder who can build the product, and one founder who is good at sales and socialing with others. This can be the same person. However, I think it is best to have two different people responsible for particular job. They also have the ability to handle the other person's job when the other cofounder is not available, a person who can backup another one.</p>
<p>Another challenge for founders is the decisiveness when firing a person. It is both very hard to find a great team member and fire a member that is not suited for the team. Founders will need some strict rules that whenever a person violates one of the rules, he/she will be fired. Maybe the employee isn't suitable for other team members, this might also be the time to just let them go. ‚ùÑ</p>
<h3 id="a-great-product">A Great Product</h3>
<p>The secret for having a great company is to have a great product. Yeah, we know. üòÇ In order to create a excellent product, we need to follow these concepts:</p>
<ol>
<li>Collect User's feedbacks</li>
</ol>
<p>How the users think about the product is the number one thing for every entrepreneur. From the TV show &ldquo;Silicon Valley&rdquo;, before they released their product, they invited a lot of people to use their compression platform. However, the people who satisfied are engineers. Monica, a CV who supports them, finds the platform hard to use. The team didn't realize that the platform is really hard for non-engineers to use.</p>
<p>A product cannot be successful if the end users don't want to use it. This playbook highly suggests that the founder or the team needs to be close to the users. Build a product that users will want to share with other people. Build a product that the team will actually use.</p>
<ol start="2">
<li>Iteration</li>
</ol>
<p>After collecting users&rsquo; feedbacks, we will need to quickly iterate the product. Release functions that the users really want.
The users might be willing to use it more often because the product is improving.</p>
<h3 id="great-execution">Great Execution</h3>
<p>Doing is always better than reading. Let's go!</p>
]]></content>
		</item>
		
		<item>
			<title>Data Structures: Array &amp; Linked List</title>
			<link>https://www.leewei.co/posts/2019/ds-array-linked-list/</link>
			<pubDate>Wed, 11 Dec 2019 00:27:34 +0800</pubDate>
			
			<guid>https://www.leewei.co/posts/2019/ds-array-linked-list/</guid>
			<description>Array Array is a data structure and it is a collection of elements or values. Each elment is identified by an array index/key.
 Advantages  It is very easy to implement. Random access is O(1) if we know the array index or key.   Disadvantages  It is not a dynamic data structure. It would take O(N) if we want to insert or remove an element in the array.</description>
			<content type="html"><![CDATA[<h3 id="array">Array</h3>
<p>Array is a data structure and it is a collection of elements or values.
Each elment is identified by an array index/key.</p>
<ul>
<li>Advantages
<ul>
<li>It is very easy to implement.</li>
<li>Random access is O(1) if we know the array index or key.</li>
</ul>
</li>
<li>Disadvantages
<ul>
<li>It is not a dynamic data structure.</li>
<li>It would take O(N) if we want to insert or remove an element in the array.</li>
<li>It is not able to store different types of data in the same array. (Not you, Python! üò†)</li>
</ul>
</li>
</ul>
<h3 id="linked-list">Linked List</h3>
<p>A linked list is composed of nodes and references/pointers pointing from one node to another node, the last node of a linked list is pointed to Null.</p>
<p>A node contains a data object and a reference:</p>
<ol>
<li>Data: this data object can be any data type.</li>
<li>Reference/Pointer: this reference is pointing to the next node and the last node of the linked list points to a Null.</li>
</ol>
<ul>
<li>Advantages
<ul>
<li>It is a dynamic data structure.</li>
<li>Can store different types of data in each node.</li>
<li>It is easier to add a new node in the linked list because we only need to update the pointer of the nodes besides the new node.</li>
</ul>
</li>
<li>Disadvantages
<ul>
<li>More memory usage because of references.</li>
<li>Cannot execute random access because linked list is sequential access.</li>
</ul>
</li>
</ul>
<p>It is also quite hard for linked list to execute reverse traverse. The solution is double linked list, which means that each node will now point to the previous and the next node. However, double linked list is not so memory friendly since we'll use more memory to store more preferences.</p>
<h3 id="array-vs-linked-list">Array vs Linked list</h3>
<ul>
<li>Search Operation
<ul>
<li>Array has a better performance in search operation if we know the index or the key of a specific item.</li>
<li>Linked list would need to iterate every item to find the exact item.</li>
</ul>
</li>
<li>Insert/Remove Operation
<ul>
<li>Array takes O(1) time for appending a item at the end of the array. An array takes O(N) to insert a new item from the start because we need to re-create an array, insert the new item and copy the rest of the data in the new array.</li>
<li>Linked list takes O(1) time for adding a new node at the beginning of the list. But it takes O(N) to insert a node at the end because we need to iterate to the last node, which is pointing to Null, then we can add a new node.</li>
</ul>
</li>
<li>Memory
<ul>
<li>Linked list uses O(N) more memory than Array because linked list needs to store preferences.</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">Operation</th>
<th align="center">Linked list</th>
<th align="right">Array</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Search</td>
<td align="center">O(N)</td>
<td align="right">O(1)</td>
</tr>
<tr>
<td align="left">Insert/Remove at the start</td>
<td align="center">O(1)</td>
<td align="right">O(N)</td>
</tr>
<tr>
<td align="left">Insert/Remove at the end</td>
<td align="center">O(N)</td>
<td align="right">O(1)</td>
</tr>
<tr>
<td align="left">Memory Usage Comparison</td>
<td align="center">O(N)</td>
<td align="right">0</td>
</tr>
</tbody>
</table>
]]></content>
		</item>
		
		<item>
			<title>Dependency Inversion Principle</title>
			<link>https://www.leewei.co/posts/2019/dependency-inversion-principle/</link>
			<pubDate>Wed, 11 Dec 2019 00:13:40 +0800</pubDate>
			
			<guid>https://www.leewei.co/posts/2019/dependency-inversion-principle/</guid>
			<description>I accidently knew the concept of Dependency Inversion Principle(DIP) when I was developing a project. Its definition:
High level modules should not depend on low level modules; both should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions.
Confusing, right? The first time I heard of this principle, I thought it was about the organization of directories. üòÜ
Example 1: without DIP Let&#39;s say we have an application that has the following structure:</description>
			<content type="html"><![CDATA[<p>I accidently knew the concept of Dependency Inversion Principle(DIP) when I was developing a project.
Its definition:</p>
<p><strong><code>High level modules should not depend on low level modules; both should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions.</code></strong></p>
<p>Confusing, right? The first time I heard of this principle, I thought it was about the organization of directories. üòÜ</p>
<h3 id="example-1-without-dip">Example 1: without DIP</h3>
<p>Let's say we have an application that has the following structure:</p>
<p>User Interface -&gt; Bussiness Logic Layer -&gt; Data Access Layer -&gt; Database</p>
<p>A user wants to see the total account users in the database. He can do this by clicking a button to get the data.
The click event triggered Bussinees Logic Layer to create a new instance, then this instance retrieved these data from the data access layer.
After that Data Access Layer made a query from the database. As a result, the queried data will display on the web.</p>
<p>This application didn't seperate each layer, it is a tight-coupled architecture.
It is fine if we're developing a small project like this, but as the project grow, it'll get more difficult to maintain and debug.</p>
<h3 id="example-2-with-dip">Example 2: with DIP</h3>
<p>Here is sample project layout with DIP:</p>
<pre><code>| app(root directory of this project)
| &gt; interface.go
|-- main
|   &gt; main.go
|-- dao
|   &gt; dao.go
|   &gt; dao_test.go
|-- core
    &gt; core.go    
	&gt; core_test.go
    &gt; interface.go
</code></pre><p>We divide this application into three packages:</p>
<ol>
<li><code>main</code>: API enpoints and error handling.</li>
<li><code>dao(data access object)</code>: collections of methods that are operating database.</li>
<li><code>core</code>: manage bussiness logic of this application.</li>
</ol>
<h3 id="advantages-of-using-dip">Advantages of using DIP</h3>
<ol>
<li>Testing</li>
</ol>
<p>If we divide this application into little pieces, we can test these packages separately.
For instance, we can use something like <a href="https://github.com/golang/mock">mock</a> to help us test functions in dao.
In this way, we will be certain that our dao package is ready to use before using it in other packages.</p>
<ol start="2">
<li>Portable</li>
</ol>
<p>As our application grow, sometimes we need to find better solutions.
For example, we might use SQLite for our application because it is a POC project.
Later on, SQLite might not be able to handle large concurrent users.
So the team want to switch to PostgreSQL database for a better performace handling.</p>
<p><strong>Since business layer(core package) is depend on the abstraction(interface),
the team just needs to change some configurations in the dao package and doesn't have to change any code in the business layer!</strong></p>
<p><img src="../img/noice.gif" alt="Noice"></p>
<ol start="3">
<li>Maintainable</li>
</ol>
<p>It'll be much more easier to let members maintain large code base because we have divide each function into small packages.
New members will have a better understanding to the code repository and senior members can quickly review these functions after a long time.</p>
<h3 id="conclusion">Conclusion</h3>
<p>Dependency Inversion Principle is a good concept that all engineers should know about, but I'm not saying we should always follow this principle. We should always consider the size of the project and the total amount of people that work in this project. Small project for fun? Maybe stick with <a href="https://en.wikipedia.org/wiki/Monolithic_application.">Monolithic_application</a>.üòù</p>
]]></content>
		</item>
		
		<item>
			<title>How to Avoid Asking Bad Questions</title>
			<link>https://www.leewei.co/posts/2019/how-to-avoid-asking-bad-questions/</link>
			<pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
			
			<guid>https://www.leewei.co/posts/2019/how-to-avoid-asking-bad-questions/</guid>
			<description>As a customer engineer, I receive all kinds of questions everyday. For me, I also ask a lot of questions to my colleagues. It is normal if we ask someone for help because we don&#39;t know everything. However, it might be frustrating to handle bad questions. Here are some tips on how we avoid asking bad questions:
1. Google it before asking anyone Sometimes the answer to the question is just one click away.</description>
			<content type="html"><![CDATA[<p>As a customer engineer, I receive all kinds of questions everyday.
For me, I also ask a lot of questions to my colleagues.
It is normal if we ask someone for help because we don't know everything.
However, it might be frustrating to handle bad questions.
Here are some tips on how we avoid asking bad questions:</p>
<h3 id="1-google-it-before-asking-anyone">1. Google it before asking anyone</h3>
<p>Sometimes the answer to the question is just one click away. People need to get used to search for answers by themselves. Why?
First, we will have a better understanding of this issue because we fix it by ourselves. We gain experience from this process and we can quickly resolve similar issue in the future. Secondly, it reduces communication cost between co-workers. Why bother asking other people for help if the answer is already there? :)</p>
<h3 id="2-dont-ask-the-same-question-over-and-over-again">2. Don't ask the same question over and over again</h3>
<p>It's okay to ask others for help, but keep in mind that don't ask the same question repeatedly.
After we got the information we needed, it is recommended to write it down, because we might forget the solution in the future.
It  will take our colleagues some time to explain the answer, we sure don't want to waste their time explaining the same question over and over again.</p>
<p>Personally, I recommend <a href="https://www.notion.so/">Notion</a>, it is a neat software to keep track of our TODOs and notes.
Notion supports markdown and emojis, and it also has a lot of default templates to use.</p>
<h3 id="3-describe-our-question-specifically">3. Describe our question specifically</h3>
<ul>
<li>Why is my website not working?</li>
<li>My Nginx server stop running since 3, Dec 2019 what time, here are some logs. Why isn't it not working?</li>
</ul>
<p>Which question do you think is better to let people understand?</p>
<p>From my experience, the following information are nice to have when we reach out for help.</p>
<ol>
<li>Some details to the question
<ul>
<li>This includes providing logs and the exact time of this issue</li>
</ul>
</li>
<li>Come up with solutions of solving it
<ul>
<li>This can help us practice thinking ways to solve the issue</li>
<li>Senior engineers can get a better understanding of the issue and provide more accurate advices.</li>
</ul>
</li>
<li>Clarify some operations that we've already done
<ul>
<li>For instance, we already tried to reboot the VM or restart the system</li>
</ul>
</li>
</ol>
<p>Here are some tips for asking a good questions from <a href="https://stackoverflow.com/help/how-to-ask">stackoverflow</a>.</p>
<h3 id="conclusion">Conclusion</h3>
<p>There are answers that cannot be answered online. It's fine to ask our colleagues for answers, we don't know everything, especially for junior engineers.
Requesting help from senior engineers can save both of our time, why is that? Experienced engineers can give advices to junior engineers, we can avoid a lot of mistakes they've made before.
At the end, if we fucked up the code base or project, it's still senior engineers&rsquo; responsibility to clean up the mess. üòì</p>
]]></content>
		</item>
		
		<item>
			<title>Data Structures and Algorithms Introduction</title>
			<link>https://www.leewei.co/posts/2019/data-structures-algorithm-introduction/</link>
			<pubDate>Sat, 26 Oct 2019 00:00:00 +0000</pubDate>
			
			<guid>https://www.leewei.co/posts/2019/data-structures-algorithm-introduction/</guid>
			<description>Finally got some time to do this. This is the first post of me learning data structures and algorithms online courses. I&#39;ll take down my notes and put it here to share with you guys. Let&#39;s begin!
Introduction Why is data structures and algorithms so important? Why does every student major in computer science related fields needs to take this course?
The answer is because we need to practice Leetcode questions and pass interviews to get a job.</description>
			<content type="html"><![CDATA[<p>Finally got some time to do this.
This is the first post of me learning data structures and algorithms online courses.
I'll take down my notes and put it here to share with you guys. Let's begin!</p>
<h2 id="introduction">Introduction</h2>
<p>Why is data structures and algorithms so important?
Why does every student major in computer science related fields needs to take this course?</p>
<p><del>The answer is because we need to practice Leetcode questions and pass interviews to get a job.</del></p>
<p>Sadly, yes but also no. That is not the main purpose why developers should learn data structures
and algorithms. The simplest answer is to let our code run faster. üòÑ</p>
<h2 id="benefits-of-learning-data-structures-and-algorithms">Benefits of learning Data structures and Algorithms</h2>
<p>Assume that we all want our code to run faster. We can do that by avoiding nested loops and making quicker calculations.
However, sometimes the bottleneck is not the alogrithm we use, it's the data structure we use.
In other words, algorithm will boost up by choosing a proper data structure.</p>
<p>For instance, Dijkstra's algorithm(Shortest Path First algorithm) is
an algorithm for finding the shortest path between two nodes.</p>
<p>Without a proper data structure, the running time will be O(N^2), N stands for the total number of nodes. If we use a priority queue approach, we can minimize time complexity to O(N*LogN). Noice!</p>
<p><img src="../img/wisely.jpg" alt=""></p>
<h2 id="data-structures-and-abstract-data-type">Data structures and Abstract data type</h2>
<p>After knowing the importance of data structures, let's dive into some basic concept of data structures and abstract data type.
Let's talk about abstract data type(ADT) first.</p>
<h3 id="abstract-data-type">Abstract data type</h3>
<p><a href="https://en.wikipedia.org/wiki/Abstract_data_type">Abstract data type</a> is a logical description of a certain data type.
ADT implies the basic behaviors of a data structure, it does not specify concrete implementation.</p>
<p>I know. It's confusing. üòì</p>
<p>For example, <a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)">Stack</a> is an abstract data type which is a last-in-first-out structure and it can be defined by three methods. <code>Push</code> inserts a data item into the stack, <code>Pop</code> removes a data item from it and <code>Peek(or top)</code> can return the data item on top of the stack without removing it.</p>
<p>So basically, abstract data type defines behaviors from the view of a user. A user can execute push, pop or peek method in a stack data type.</p>
<h3 id="data-structures">Data structures</h3>
<p><a href="https://en.wikipedia.org/wiki/Data_structure">Data structures</a> is the concrete implementation and the physical form of a certain data type. Data structure is aim to make access and modification more efficiently.</p>
<p>For example, <a href="https://en.wikipedia.org/wiki/Array_data_structure">Array</a> is a data structure which is a collection of many elements.
Time complexity of indexing a data item in an array is O(1).</p>
<p>Data structure is the actual implementation of a data type and is from the view of a implementer.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In conclusion, we can know that abstract data type and data structures are not independent from each other.
An abstract data type is like a specification and every abstract data type has an underlying data structure that is going to implement
the behaviors that are defined by the abstract data type.</p>
]]></content>
		</item>
		
	</channel>
</rss>
